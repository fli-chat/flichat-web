"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@stomp";
exports.ids = ["vendor-chunks/@stomp"];
exports.modules = {

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/augment-websocket.js":
/*!***************************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/augment-websocket.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   augmentWebsocket: () => (/* binding */ augmentWebsocket)\n/* harmony export */ });\n/**\n * @internal\n */\nfunction augmentWebsocket(webSocket, debug) {\n    webSocket.terminate = function () {\n        const noOp = () => { };\n        // set all callbacks to no op\n        this.onerror = noOp;\n        this.onmessage = noOp;\n        this.onopen = noOp;\n        const ts = new Date();\n        const id = Math.random().toString().substring(2, 8); // A simulated id\n        const origOnClose = this.onclose;\n        // Track delay in actual closure of the socket\n        this.onclose = closeEvent => {\n            const delay = new Date().getTime() - ts.getTime();\n            debug(`Discarded socket (#${id})  closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`);\n        };\n        this.close();\n        origOnClose?.call(webSocket, {\n            code: 4001,\n            reason: `Quick discarding socket (#${id}) without waiting for the shutdown sequence.`,\n            wasClean: false,\n        });\n    };\n}\n//# sourceMappingURL=augment-websocket.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0b21wL3N0b21wanMvZXNtNi9hdWdtZW50LXdlYnNvY2tldC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxHQUFHLGtCQUFrQixNQUFNLHdCQUF3QixnQkFBZ0IsR0FBRyxrQkFBa0I7QUFDaEk7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsR0FBRztBQUNwRDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saWZlZGl2ZXJnZW5jZTEvRGVza3RvcC9mbGljaGF0LXdlYi9ub2RlX21vZHVsZXMvQHN0b21wL3N0b21wanMvZXNtNi9hdWdtZW50LXdlYnNvY2tldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gYXVnbWVudFdlYnNvY2tldCh3ZWJTb2NrZXQsIGRlYnVnKSB7XG4gICAgd2ViU29ja2V0LnRlcm1pbmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgbm9PcCA9ICgpID0+IHsgfTtcbiAgICAgICAgLy8gc2V0IGFsbCBjYWxsYmFja3MgdG8gbm8gb3BcbiAgICAgICAgdGhpcy5vbmVycm9yID0gbm9PcDtcbiAgICAgICAgdGhpcy5vbm1lc3NhZ2UgPSBub09wO1xuICAgICAgICB0aGlzLm9ub3BlbiA9IG5vT3A7XG4gICAgICAgIGNvbnN0IHRzID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgaWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIsIDgpOyAvLyBBIHNpbXVsYXRlZCBpZFxuICAgICAgICBjb25zdCBvcmlnT25DbG9zZSA9IHRoaXMub25jbG9zZTtcbiAgICAgICAgLy8gVHJhY2sgZGVsYXkgaW4gYWN0dWFsIGNsb3N1cmUgb2YgdGhlIHNvY2tldFxuICAgICAgICB0aGlzLm9uY2xvc2UgPSBjbG9zZUV2ZW50ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRlbGF5ID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0cy5nZXRUaW1lKCk7XG4gICAgICAgICAgICBkZWJ1ZyhgRGlzY2FyZGVkIHNvY2tldCAoIyR7aWR9KSAgY2xvc2VkIGFmdGVyICR7ZGVsYXl9bXMsIHdpdGggY29kZS9yZWFzb246ICR7Y2xvc2VFdmVudC5jb2RlfS8ke2Nsb3NlRXZlbnQucmVhc29ufWApO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIG9yaWdPbkNsb3NlPy5jYWxsKHdlYlNvY2tldCwge1xuICAgICAgICAgICAgY29kZTogNDAwMSxcbiAgICAgICAgICAgIHJlYXNvbjogYFF1aWNrIGRpc2NhcmRpbmcgc29ja2V0ICgjJHtpZH0pIHdpdGhvdXQgd2FpdGluZyBmb3IgdGhlIHNodXRkb3duIHNlcXVlbmNlLmAsXG4gICAgICAgICAgICB3YXNDbGVhbjogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdWdtZW50LXdlYnNvY2tldC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/augment-websocket.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/byte.js":
/*!**************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/byte.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BYTE: () => (/* binding */ BYTE)\n/* harmony export */ });\n/**\n * Some byte values, used as per STOMP specifications.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nconst BYTE = {\n    // LINEFEED byte (octet 10)\n    LF: '\\x0A',\n    // NULL byte (octet 0)\n    NULL: '\\x00',\n};\n//# sourceMappingURL=byte.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0b21wL3N0b21wanMvZXNtNi9ieXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlmZWRpdmVyZ2VuY2UxL0Rlc2t0b3AvZmxpY2hhdC13ZWIvbm9kZV9tb2R1bGVzL0BzdG9tcC9zdG9tcGpzL2VzbTYvYnl0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNvbWUgYnl0ZSB2YWx1ZXMsIHVzZWQgYXMgcGVyIFNUT01QIHNwZWNpZmljYXRpb25zLlxuICpcbiAqIFBhcnQgb2YgYEBzdG9tcC9zdG9tcGpzYC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEJZVEUgPSB7XG4gICAgLy8gTElORUZFRUQgYnl0ZSAob2N0ZXQgMTApXG4gICAgTEY6ICdcXHgwQScsXG4gICAgLy8gTlVMTCBieXRlIChvY3RldCAwKVxuICAgIE5VTEw6ICdcXHgwMCcsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/byte.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/client.js":
/*!****************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/client.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ Client)\n/* harmony export */ });\n/* harmony import */ var _stomp_handler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stomp-handler.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/stomp-handler.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/types.js\");\n/* harmony import */ var _versions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./versions.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/versions.js\");\n\n\n\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n *\n * This class provides a robust implementation for connecting to and interacting with a\n * STOMP-compliant messaging broker over WebSocket. It supports STOMP versions 1.2, 1.1, and 1.0.\n *\n * Features:\n * - Handles automatic reconnections.\n * - Supports heartbeat mechanisms to detect and report communication failures.\n * - Allows customization of connection and WebSocket behaviors through configurations.\n * - Compatible with both browser environments and Node.js with polyfill support for WebSocket.\n */\nclass Client {\n    /**\n     * Provides access to the underlying WebSocket instance.\n     * This property is **read-only**.\n     *\n     * Example:\n     * ```javascript\n     * const webSocket = client.webSocket;\n     * if (webSocket) {\n     *   console.log('WebSocket is connected:', webSocket.readyState === WebSocket.OPEN);\n     * }\n     * ```\n     *\n     * **Caution:**\n     * Directly interacting with the WebSocket instance (e.g., sending or receiving frames)\n     * can interfere with the proper functioning of this library. Such actions may cause\n     * unexpected behavior, disconnections, or invalid state in the library's internal mechanisms.\n     *\n     * Instead, use the library's provided methods to manage STOMP communication.\n     *\n     * @returns The WebSocket instance used by the STOMP handler, or `undefined` if not connected.\n     */\n    get webSocket() {\n        return this._stompHandler?._webSocket;\n    }\n    /**\n     * Allows customization of the disconnection headers.\n     *\n     * Any changes made during an active session will also be applied immediately.\n     *\n     * Example:\n     * ```javascript\n     * client.disconnectHeaders = {\n     *   receipt: 'custom-receipt-id'\n     * };\n     * ```\n     */\n    get disconnectHeaders() {\n        return this._disconnectHeaders;\n    }\n    set disconnectHeaders(value) {\n        this._disconnectHeaders = value;\n        if (this._stompHandler) {\n            this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n        }\n    }\n    /**\n     * Indicates whether there is an active connection to the STOMP broker.\n     *\n     * Usage:\n     * ```javascript\n     * if (client.connected) {\n     *   console.log('Client is connected to the broker.');\n     * } else {\n     *   console.log('No connection to the broker.');\n     * }\n     * ```\n     *\n     * @returns `true` if the client is currently connected, `false` otherwise.\n     */\n    get connected() {\n        return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * The version of the STOMP protocol negotiated with the server during connection.\n     *\n     * This is a **read-only** property and reflects the negotiated protocol version after\n     * a successful connection.\n     *\n     * Example:\n     * ```javascript\n     * console.log('Connected STOMP version:', client.connectedVersion);\n     * ```\n     *\n     * @returns The negotiated STOMP protocol version or `undefined` if not connected.\n     */\n    get connectedVersion() {\n        return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * Indicates whether the client is currently active.\n     *\n     * A client is considered active if it is connected or actively attempting to reconnect.\n     *\n     * Example:\n     * ```javascript\n     * if (client.active) {\n     *   console.log('The client is active.');\n     * } else {\n     *   console.log('The client is inactive.');\n     * }\n     * ```\n     *\n     * @returns `true` if the client is active, otherwise `false`.\n     */\n    get active() {\n        return this.state === _types_js__WEBPACK_IMPORTED_MODULE_0__.ActivationState.ACTIVE;\n    }\n    _changeState(state) {\n        this.state = state;\n        this.onChangeState(state);\n    }\n    /**\n     * Constructs a new STOMP client instance.\n     *\n     * The constructor initializes default values and sets up no-op callbacks for all events.\n     * Configuration can be passed during construction, or updated later using `configure`.\n     *\n     * Example:\n     * ```javascript\n     * const client = new Client({\n     *   brokerURL: 'wss://broker.example.com',\n     *   reconnectDelay: 5000\n     * });\n     * ```\n     *\n     * @param conf Optional configuration object to initialize the client with.\n     */\n    constructor(conf = {}) {\n        /**\n         * STOMP protocol versions to use during the handshake. By default, the client will attempt\n         * versions `1.2`, `1.1`, and `1.0` in descending order of preference.\n         *\n         * Example:\n         * ```javascript\n         * // Configure the client to only use versions 1.1 and 1.0\n         * client.stompVersions = new Versions(['1.1', '1.0']);\n         * ```\n         */\n        this.stompVersions = _versions_js__WEBPACK_IMPORTED_MODULE_1__.Versions.default;\n        /**\n         * Timeout for establishing STOMP connection, in milliseconds.\n         *\n         * If the connection is not established within this period, the attempt will fail.\n         * The default is `0`, meaning no timeout is set for connection attempts.\n         *\n         * Example:\n         * ```javascript\n         * client.connectionTimeout = 5000; // Fail connection if not established in 5 seconds\n         * ```\n         */\n        this.connectionTimeout = 0;\n        /**\n         * Delay (in milliseconds) between reconnection attempts if the connection drops.\n         *\n         * Set to `0` to disable automatic reconnections. The default value is `5000` ms (5 seconds).\n         *\n         * Example:\n         * ```javascript\n         * client.reconnectDelay = 3000; // Attempt reconnection every 3 seconds\n         * client.reconnectDelay = 0; // Disable automatic reconnection\n         * ```\n         */\n        this.reconnectDelay = 5000;\n        /**\n         * The next reconnection delay, used internally.\n         * Initialized to the value of [Client#reconnectDelay]{@link Client#reconnectDelay}, and it may\n         * dynamically change based on [Client#reconnectTimeMode]{@link Client#reconnectTimeMode}.\n         */\n        this._nextReconnectDelay = 0;\n        /**\n         * Maximum delay (in milliseconds) between reconnection attempts when using exponential backoff.\n         *\n         * Default is 15 minutes (`15 * 60 * 1000` milliseconds). If `0`, there will be no upper limit.\n         *\n         * Example:\n         * ```javascript\n         * client.maxReconnectDelay = 10000; // Maximum wait time is 10 seconds\n         * ```\n         */\n        this.maxReconnectDelay = 15 * 60 * 1000;\n        /**\n         * Mode for determining the time interval between reconnection attempts.\n         *\n         * Available modes:\n         * - `ReconnectionTimeMode.LINEAR` (default): Fixed delays between reconnection attempts.\n         * - `ReconnectionTimeMode.EXPONENTIAL`: Delay doubles after each attempt, capped by [maxReconnectDelay]{@link Client#maxReconnectDelay}.\n         *\n         * Example:\n         * ```javascript\n         * client.reconnectTimeMode = ReconnectionTimeMode.EXPONENTIAL;\n         * client.reconnectDelay = 200; // Initial delay of 200 ms, doubles with each attempt\n         * client.maxReconnectDelay = 2 * 60 * 1000; // Cap delay at 10 minutes\n         * ```\n         */\n        this.reconnectTimeMode = _types_js__WEBPACK_IMPORTED_MODULE_0__.ReconnectionTimeMode.LINEAR;\n        /**\n         * Interval (in milliseconds) for receiving heartbeat signals from the server.\n         *\n         * Specifies the expected frequency of heartbeats sent by the server. Set to `0` to disable.\n         *\n         * Example:\n         * ```javascript\n         * client.heartbeatIncoming = 10000; // Expect a heartbeat every 10 seconds\n         * ```\n         */\n        this.heartbeatIncoming = 10000;\n        /**\n         * Multiplier for adjusting tolerance when processing heartbeat signals.\n         *\n         * Tolerance level is calculated using the multiplier:\n         * `tolerance = heartbeatIncoming * heartbeatToleranceMultiplier`.\n         * This helps account for delays in network communication or variations in timings.\n         *\n         * Default value is `2`.\n         *\n         * Example:\n         * ```javascript\n         * client.heartbeatToleranceMultiplier = 2.5; // Tolerates longer delays\n         * ```\n         */\n        this.heartbeatToleranceMultiplier = 2;\n        /**\n         * Interval (in milliseconds) for sending heartbeat signals to the server.\n         *\n         * Specifies how frequently heartbeats should be sent to the server. Set to `0` to disable.\n         *\n         * Example:\n         * ```javascript\n         * client.heartbeatOutgoing = 5000; // Send a heartbeat every 5 seconds\n         * ```\n         */\n        this.heartbeatOutgoing = 10000;\n        /**\n         * Strategy for sending outgoing heartbeats.\n         *\n         * Options:\n         * - `TickerStrategy.Worker`: Uses Web Workers for sending heartbeats (recommended for long-running or background sessions).\n         * - `TickerStrategy.Interval`: Uses standard JavaScript `setInterval` (default).\n         *\n         * Note:\n         * - If Web Workers are unavailable (e.g., in Node.js), the `Interval` strategy is used automatically.\n         * - Web Workers are preferable in browsers for reducing disconnects when tabs are in the background.\n         *\n         * Example:\n         * ```javascript\n         * client.heartbeatStrategy = TickerStrategy.Worker;\n         * ```\n         */\n        this.heartbeatStrategy = _types_js__WEBPACK_IMPORTED_MODULE_0__.TickerStrategy.Interval;\n        /**\n         * Enables splitting of large text WebSocket frames into smaller chunks.\n         *\n         * This setting is enabled for brokers that support only chunked messages (e.g., Java Spring-based brokers).\n         * Default is `false`.\n         *\n         * Warning:\n         * - Should not be used with WebSocket-compliant brokers, as chunking may cause large message failures.\n         * - Binary WebSocket frames are never split.\n         *\n         * Example:\n         * ```javascript\n         * client.splitLargeFrames = true;\n         * client.maxWebSocketChunkSize = 4096; // Allow chunks of 4 KB\n         * ```\n         */\n        this.splitLargeFrames = false;\n        /**\n         * Maximum size (in bytes) for individual WebSocket chunks if [splitLargeFrames]{@link Client#splitLargeFrames} is enabled.\n         *\n         * Default is 8 KB (`8 * 1024` bytes). This value has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n         */\n        this.maxWebSocketChunkSize = 8 * 1024;\n        /**\n         * Forces all WebSocket frames to use binary transport, irrespective of payload type.\n         *\n         * Default behavior determines frame type based on payload (e.g., binary data for ArrayBuffers).\n         *\n         * Example:\n         * ```javascript\n         * client.forceBinaryWSFrames = true;\n         * ```\n         */\n        this.forceBinaryWSFrames = false;\n        /**\n         * Workaround for a React Native WebSocket bug, where messages containing `NULL` are chopped.\n         *\n         * Enabling this appends a `NULL` character to incoming frames to ensure they remain valid STOMP packets.\n         *\n         * Warning:\n         * - For brokers that split large messages, this may cause data loss or connection termination.\n         *\n         * Example:\n         * ```javascript\n         * client.appendMissingNULLonIncoming = true;\n         * ```\n         */\n        this.appendMissingNULLonIncoming = false;\n        /**\n         * Instruct the library to immediately terminate the socket on communication failures, even\n         * before the WebSocket is completely closed.\n         *\n         * This is particularly useful in browser environments where WebSocket closure may get delayed,\n         * causing prolonged reconnection intervals under certain failure conditions.\n         *\n         *\n         * Example:\n         * ```javascript\n         * client.discardWebsocketOnCommFailure = true; // Enable aggressive closing of WebSocket\n         * ```\n         *\n         * Default value: `false`.\n         */\n        this.discardWebsocketOnCommFailure = false;\n        /**\n         * Current activation state of the client.\n         *\n         * Possible states:\n         * - `ActivationState.ACTIVE`: Client is connected or actively attempting to connect.\n         * - `ActivationState.INACTIVE`: Client is disconnected and not attempting to reconnect.\n         * - `ActivationState.DEACTIVATING`: Client is in the process of disconnecting.\n         *\n         * Note: The client may transition directly from `ACTIVE` to `INACTIVE` without entering\n         * the `DEACTIVATING` state.\n         */\n        this.state = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActivationState.INACTIVE;\n        // No op callbacks\n        const noOp = () => { };\n        this.debug = noOp;\n        this.beforeConnect = noOp;\n        this.onConnect = noOp;\n        this.onDisconnect = noOp;\n        this.onUnhandledMessage = noOp;\n        this.onUnhandledReceipt = noOp;\n        this.onUnhandledFrame = noOp;\n        this.onHeartbeatReceived = noOp;\n        this.onHeartbeatLost = noOp;\n        this.onStompError = noOp;\n        this.onWebSocketClose = noOp;\n        this.onWebSocketError = noOp;\n        this.logRawCommunication = false;\n        this.onChangeState = noOp;\n        // These parameters would typically get proper values before connect is called\n        this.connectHeaders = {};\n        this._disconnectHeaders = {};\n        // Apply configuration\n        this.configure(conf);\n    }\n    /**\n     * Updates the client's configuration.\n     *\n     * All properties in the provided configuration object will override the current settings.\n     *\n     * Additionally, a warning is logged if `maxReconnectDelay` is configured to a\n     * value lower than `reconnectDelay`, and `maxReconnectDelay` is adjusted to match `reconnectDelay`.\n     *\n     * Example:\n     * ```javascript\n     * client.configure({\n     *   reconnectDelay: 3000,\n     *   maxReconnectDelay: 10000\n     * });\n     * ```\n     *\n     * @param conf Configuration object containing the new settings.\n     */\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n        // Warn on incorrect maxReconnectDelay settings\n        if (this.maxReconnectDelay > 0 &&\n            this.maxReconnectDelay < this.reconnectDelay) {\n            this.debug(`Warning: maxReconnectDelay (${this.maxReconnectDelay}ms) is less than reconnectDelay (${this.reconnectDelay}ms). Using reconnectDelay as the maxReconnectDelay delay.`);\n            this.maxReconnectDelay = this.reconnectDelay;\n        }\n    }\n    /**\n     * Activates the client, initiating a connection to the STOMP broker.\n     *\n     * On activation, the client attempts to connect and sets its state to `ACTIVE`. If the connection\n     * is lost, it will automatically retry based on `reconnectDelay` or `maxReconnectDelay`. If\n     * `reconnectTimeMode` is set to `EXPONENTIAL`, the reconnect delay increases exponentially.\n     *\n     * To stop reconnection attempts and disconnect, call [Client#deactivate]{@link Client#deactivate}.\n     *\n     * Example:\n     * ```javascript\n     * client.activate(); // Connect to the broker\n     * ```\n     *\n     * If the client is currently `DEACTIVATING`, connection is delayed until the deactivation process completes.\n     */\n    activate() {\n        const _activate = () => {\n            if (this.active) {\n                this.debug('Already ACTIVE, ignoring request to activate');\n                return;\n            }\n            this._changeState(_types_js__WEBPACK_IMPORTED_MODULE_0__.ActivationState.ACTIVE);\n            this._nextReconnectDelay = this.reconnectDelay;\n            this._connect();\n        };\n        // if it is deactivating, wait for it to complete before activating.\n        if (this.state === _types_js__WEBPACK_IMPORTED_MODULE_0__.ActivationState.DEACTIVATING) {\n            this.debug('Waiting for deactivation to finish before activating');\n            this.deactivate().then(() => {\n                _activate();\n            });\n        }\n        else {\n            _activate();\n        }\n    }\n    async _connect() {\n        await this.beforeConnect(this);\n        if (this._stompHandler) {\n            this.debug('There is already a stompHandler, skipping the call to connect');\n            return;\n        }\n        if (!this.active) {\n            this.debug('Client has been marked inactive, will not attempt to connect');\n            return;\n        }\n        // setup connection watcher\n        if (this.connectionTimeout > 0) {\n            // clear first\n            if (this._connectionWatcher) {\n                clearTimeout(this._connectionWatcher);\n            }\n            this._connectionWatcher = setTimeout(() => {\n                if (this.connected) {\n                    return;\n                }\n                // Connection not established, close the underlying socket\n                // a reconnection will be attempted\n                this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n                this.forceDisconnect();\n            }, this.connectionTimeout);\n        }\n        this.debug('Opening Web Socket...');\n        // Get the actual WebSocket (or a similar object)\n        const webSocket = this._createWebSocket();\n        this._stompHandler = new _stomp_handler_js__WEBPACK_IMPORTED_MODULE_2__.StompHandler(this, webSocket, {\n            debug: this.debug,\n            stompVersions: this.stompVersions,\n            connectHeaders: this.connectHeaders,\n            disconnectHeaders: this._disconnectHeaders,\n            heartbeatIncoming: this.heartbeatIncoming,\n            heartbeatGracePeriods: this.heartbeatToleranceMultiplier,\n            heartbeatOutgoing: this.heartbeatOutgoing,\n            heartbeatStrategy: this.heartbeatStrategy,\n            splitLargeFrames: this.splitLargeFrames,\n            maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n            forceBinaryWSFrames: this.forceBinaryWSFrames,\n            logRawCommunication: this.logRawCommunication,\n            appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n            discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n            onConnect: frame => {\n                // Successfully connected, stop the connection watcher\n                if (this._connectionWatcher) {\n                    clearTimeout(this._connectionWatcher);\n                    this._connectionWatcher = undefined;\n                }\n                if (!this.active) {\n                    this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                    this._disposeStompHandler();\n                    return;\n                }\n                this.onConnect(frame);\n            },\n            onDisconnect: frame => {\n                this.onDisconnect(frame);\n            },\n            onStompError: frame => {\n                this.onStompError(frame);\n            },\n            onWebSocketClose: evt => {\n                this._stompHandler = undefined; // a new one will be created in case of a reconnect\n                if (this.state === _types_js__WEBPACK_IMPORTED_MODULE_0__.ActivationState.DEACTIVATING) {\n                    // Mark deactivation complete\n                    this._changeState(_types_js__WEBPACK_IMPORTED_MODULE_0__.ActivationState.INACTIVE);\n                }\n                // The callback is called before attempting to reconnect, this would allow the client\n                // to be `deactivated` in the callback.\n                this.onWebSocketClose(evt);\n                if (this.active) {\n                    this._schedule_reconnect();\n                }\n            },\n            onWebSocketError: evt => {\n                this.onWebSocketError(evt);\n            },\n            onUnhandledMessage: message => {\n                this.onUnhandledMessage(message);\n            },\n            onUnhandledReceipt: frame => {\n                this.onUnhandledReceipt(frame);\n            },\n            onUnhandledFrame: frame => {\n                this.onUnhandledFrame(frame);\n            },\n            onHeartbeatReceived: () => {\n                this.onHeartbeatReceived();\n            },\n            onHeartbeatLost: () => {\n                this.onHeartbeatLost();\n            },\n        });\n        this._stompHandler.start();\n    }\n    _createWebSocket() {\n        let webSocket;\n        if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n        }\n        else if (this.brokerURL) {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n        }\n        else {\n            throw new Error('Either brokerURL or webSocketFactory must be provided');\n        }\n        webSocket.binaryType = 'arraybuffer';\n        return webSocket;\n    }\n    _schedule_reconnect() {\n        if (this._nextReconnectDelay > 0) {\n            this.debug(`STOMP: scheduling reconnection in ${this._nextReconnectDelay}ms`);\n            this._reconnector = setTimeout(() => {\n                if (this.reconnectTimeMode === _types_js__WEBPACK_IMPORTED_MODULE_0__.ReconnectionTimeMode.EXPONENTIAL) {\n                    this._nextReconnectDelay = this._nextReconnectDelay * 2;\n                    // Truncated exponential backoff with a set limit unless disabled\n                    if (this.maxReconnectDelay !== 0) {\n                        this._nextReconnectDelay = Math.min(this._nextReconnectDelay, this.maxReconnectDelay);\n                    }\n                }\n                this._connect();\n            }, this._nextReconnectDelay);\n        }\n    }\n    /**\n     * Disconnects the client and stops the automatic reconnection loop.\n     *\n     * If there is an active STOMP connection at the time of invocation, the appropriate callbacks\n     * will be triggered during the shutdown sequence. Once deactivated, the client will enter the\n     * `INACTIVE` state, and no further reconnection attempts will be made.\n     *\n     * **Behavior**:\n     * - If there is no active WebSocket connection, this method resolves immediately.\n     * - If there is an active connection, the method waits for the underlying WebSocket\n     *   to properly close before resolving.\n     * - Multiple calls to this method are safe. Each invocation resolves upon completion.\n     * - To reactivate, call [Client#activate]{@link Client#activate}.\n     *\n     * **Experimental Option:**\n     * - By specifying the `force: true` option, the WebSocket connection is discarded immediately,\n     *   bypassing both the STOMP and WebSocket shutdown sequences.\n     * - **Caution:** Using `force: true` may leave the WebSocket in an inconsistent state,\n     *   and brokers may not immediately detect the termination.\n     *\n     * Example:\n     * ```javascript\n     * // Graceful disconnect\n     * await client.deactivate();\n     *\n     * // Forced disconnect to speed up shutdown when the connection is stale\n     * await client.deactivate({ force: true });\n     * ```\n     *\n     * @param options Configuration options for deactivation. Use `force: true` for immediate shutdown.\n     * @returns A Promise that resolves when the deactivation process completes.\n     */\n    async deactivate(options = {}) {\n        const force = options.force || false;\n        const needToDispose = this.active;\n        let retPromise;\n        if (this.state === _types_js__WEBPACK_IMPORTED_MODULE_0__.ActivationState.INACTIVE) {\n            this.debug(`Already INACTIVE, nothing more to do`);\n            return Promise.resolve();\n        }\n        this._changeState(_types_js__WEBPACK_IMPORTED_MODULE_0__.ActivationState.DEACTIVATING);\n        // Reset reconnection timer just to be safe\n        this._nextReconnectDelay = 0;\n        // Clear if a reconnection was scheduled\n        if (this._reconnector) {\n            clearTimeout(this._reconnector);\n            this._reconnector = undefined;\n        }\n        if (this._stompHandler &&\n            // @ts-ignore - if there is a _stompHandler, there is the webSocket\n            this.webSocket.readyState !== _types_js__WEBPACK_IMPORTED_MODULE_0__.StompSocketState.CLOSED) {\n            const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\n            // we need to wait for the underlying websocket to close\n            retPromise = new Promise((resolve, reject) => {\n                // @ts-ignore - there is a _stompHandler\n                this._stompHandler.onWebSocketClose = evt => {\n                    origOnWebSocketClose(evt);\n                    resolve();\n                };\n            });\n        }\n        else {\n            // indicate that auto reconnect loop should terminate\n            this._changeState(_types_js__WEBPACK_IMPORTED_MODULE_0__.ActivationState.INACTIVE);\n            return Promise.resolve();\n        }\n        if (force) {\n            this._stompHandler?.discardWebsocket();\n        }\n        else if (needToDispose) {\n            this._disposeStompHandler();\n        }\n        return retPromise;\n    }\n    /**\n     * Forces a disconnect by directly closing the WebSocket.\n     *\n     * Unlike a normal disconnect, this does not send a DISCONNECT sequence to the broker but\n     * instead closes the WebSocket connection directly. After forcing a disconnect, the client\n     * will automatically attempt to reconnect based on its `reconnectDelay` configuration.\n     *\n     * **Note:** To prevent further reconnect attempts, call [Client#deactivate]{@link Client#deactivate}.\n     *\n     * Example:\n     * ```javascript\n     * client.forceDisconnect();\n     * ```\n     */\n    forceDisconnect() {\n        if (this._stompHandler) {\n            this._stompHandler.forceDisconnect();\n        }\n    }\n    _disposeStompHandler() {\n        // Dispose STOMP Handler\n        if (this._stompHandler) {\n            this._stompHandler.dispose();\n        }\n    }\n    /**\n     * Sends a message to the specified destination on the STOMP broker.\n     *\n     * The `body` must be a `string`. For non-string payloads (e.g., JSON), encode it as a string before sending.\n     * If sending binary data, use the `binaryBody` parameter as a [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     *\n     * **Content-Length Behavior**:\n     * - For non-binary messages, the `content-length` header is added by default.\n     * - The `content-length` header can be skipped for text frames by setting `skipContentLengthHeader: true` in the parameters.\n     * - For binary messages, the `content-length` header is always included.\n     *\n     * **Notes**:\n     * - Ensure that brokers support binary frames before using `binaryBody`.\n     * - Sending messages with NULL octets and missing `content-length` headers can cause brokers to disconnect and throw errors.\n     *\n     * Example:\n     * ```javascript\n     * // Basic text message\n     * client.publish({ destination: \"/queue/test\", body: \"Hello, STOMP\" });\n     *\n     * // Text message with additional headers\n     * client.publish({ destination: \"/queue/test\", headers: { priority: 9 }, body: \"Hello, STOMP\" });\n     *\n     * // Skip content-length header\n     * client.publish({ destination: \"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true });\n     *\n     * // Binary message\n     * const binaryData = new Uint8Array([1, 2, 3, 4]);\n     * client.publish({\n     *   destination: '/topic/special',\n     *   binaryBody: binaryData,\n     *   headers: { 'content-type': 'application/octet-stream' }\n     * });\n     * ```\n     */\n    publish(params) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.publish(params);\n    }\n    _checkConnection() {\n        if (!this.connected) {\n            throw new TypeError('There is no underlying STOMP connection');\n        }\n    }\n    /**\n     * Monitors for a receipt acknowledgment from the broker for specific operations.\n     *\n     * Add a `receipt` header to the operation (like subscribe or publish), and use this method with\n     * the same receipt ID to detect when the broker has acknowledged the operation's completion.\n     *\n     * The callback is invoked with the corresponding {@link IFrame} when the receipt is received.\n     *\n     * Example:\n     * ```javascript\n     * const receiptId = \"unique-receipt-id\";\n     *\n     * client.watchForReceipt(receiptId, (frame) => {\n     *   console.log(\"Operation acknowledged by the broker:\", frame);\n     * });\n     *\n     * // Attach the receipt header to an operation\n     * client.publish({ destination: \"/queue/test\", headers: { receipt: receiptId }, body: \"Hello\" });\n     * ```\n     *\n     * @param receiptId Unique identifier for the receipt.\n     * @param callback Callback function invoked on receiving the RECEIPT frame.\n     */\n    watchForReceipt(receiptId, callback) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribes to a destination on the STOMP broker.\n     *\n     * The callback is triggered for each message received from the subscribed destination. The message\n     * is passed as an {@link IMessage} instance.\n     *\n     * **Subscription ID**:\n     * - If no `id` is provided in `headers`, the library generates a unique subscription ID automatically.\n     * - Provide an explicit `id` in `headers` if you wish to manage the subscription ID manually.\n     *\n     * Example:\n     * ```javascript\n     * const callback = (message) => {\n     *   console.log(\"Received message:\", message.body);\n     * };\n     *\n     * // Auto-generated subscription ID\n     * const subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     * // Explicit subscription ID\n     * const mySubId = \"my-subscription-id\";\n     * const subscription = client.subscribe(\"/queue/test\", callback, { id: mySubId });\n     * ```\n     *\n     * @param destination Destination to subscribe to.\n     * @param callback Function invoked for each received message.\n     * @param headers Optional headers for subscription, such as `id`.\n     * @returns A {@link StompSubscription} which can be used to manage the subscription.\n     */\n    subscribe(destination, callback, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * Unsubscribes from a subscription on the STOMP broker.\n     *\n     * Prefer using the `unsubscribe` method directly on the {@link StompSubscription} returned from `subscribe` for cleaner management:\n     * ```javascript\n     * const subscription = client.subscribe(\"/queue/test\", callback);\n     * // Unsubscribe using the subscription object\n     * subscription.unsubscribe();\n     * ```\n     *\n     * This method can also be used directly with the subscription ID.\n     *\n     * Example:\n     * ```javascript\n     * client.unsubscribe(\"my-subscription-id\");\n     * ```\n     *\n     * @param id Subscription ID to unsubscribe.\n     * @param headers Optional headers to pass for the UNSUBSCRIBE frame.\n     */\n    unsubscribe(id, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Starts a new transaction. The returned {@link ITransaction} object provides\n     * methods for [commit]{@link ITransaction#commit} and [abort]{@link ITransaction#abort}.\n     *\n     * If `transactionId` is not provided, the library generates a unique ID internally.\n     *\n     * Example:\n     * ```javascript\n     * const tx = client.begin(); // Auto-generated ID\n     *\n     * // Or explicitly specify a transaction ID\n     * const tx = client.begin(\"my-transaction-id\");\n     * ```\n     *\n     * @param transactionId Optional transaction ID.\n     * @returns An instance of {@link ITransaction}.\n     */\n    begin(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commits a transaction.\n     *\n     * It is strongly recommended to call [commit]{@link ITransaction#commit} on\n     * the transaction object returned by [client#begin]{@link Client#begin}.\n     *\n     * Example:\n     * ```javascript\n     * const tx = client.begin();\n     * // Perform operations under this transaction\n     * tx.commit();\n     * ```\n     *\n     * @param transactionId The ID of the transaction to commit.\n     */\n    commit(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Aborts a transaction.\n     *\n     * It is strongly recommended to call [abort]{@link ITransaction#abort} directly\n     * on the transaction object returned by [client#begin]{@link Client#begin}.\n     *\n     * Example:\n     * ```javascript\n     * const tx = client.begin();\n     * // Perform operations under this transaction\n     * tx.abort(); // Abort the transaction\n     * ```\n     *\n     * @param transactionId The ID of the transaction to abort.\n     */\n    abort(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.abort(transactionId);\n    }\n    /**\n     * Acknowledges receipt of a message. Typically, this should be done by calling\n     * [ack]{@link IMessage#ack} directly on the {@link IMessage} instance passed\n     * to the subscription callback.\n     *\n     * Example:\n     * ```javascript\n     * const callback = (message) => {\n     *   // Process the message\n     *   message.ack(); // Acknowledge the message\n     * };\n     *\n     * client.subscribe(\"/queue/example\", callback, { ack: \"client\" });\n     * ```\n     *\n     * @param messageId The ID of the message to acknowledge.\n     * @param subscriptionId The ID of the subscription.\n     * @param headers Optional headers for the acknowledgment frame.\n     */\n    ack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * Rejects a message (negative acknowledgment). Like acknowledgments, this should\n     * typically be done by calling [nack]{@link IMessage#nack} directly on the {@link IMessage}\n     * instance passed to the subscription callback.\n     *\n     * Example:\n     * ```javascript\n     * const callback = (message) => {\n     *   // Process the message\n     *   if (isError(message)) {\n     *     message.nack(); // Reject the message\n     *   }\n     * };\n     *\n     * client.subscribe(\"/queue/example\", callback, { ack: \"client\" });\n     * ```\n     *\n     * @param messageId The ID of the message to negatively acknowledge.\n     * @param subscriptionId The ID of the subscription.\n     * @param headers Optional headers for the NACK frame.\n     */\n    nack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n}\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0b21wL3N0b21wanMvZXNtNi9jbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFrRDtBQUNvRDtBQUM3RDtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixzREFBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixrREFBUTtBQUNyQztBQUNBO0FBQ0E7QUFD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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMscUJBQXFCLGlCQUFpQjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsZUFBZTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbGlmZWRpdmVyZ2VuY2UxL0Rlc2t0b3AvZmxpY2hhdC13ZWIvbm9kZV9tb2R1bGVzL0BzdG9tcC9zdG9tcGpzL2VzbTYvY2xpZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0b21wSGFuZGxlciB9IGZyb20gJy4vc3RvbXAtaGFuZGxlci5qcyc7XG5pbXBvcnQgeyBBY3RpdmF0aW9uU3RhdGUsIFJlY29ubmVjdGlvblRpbWVNb2RlLCBTdG9tcFNvY2tldFN0YXRlLCBUaWNrZXJTdHJhdGVneSwgfSBmcm9tICcuL3R5cGVzLmpzJztcbmltcG9ydCB7IFZlcnNpb25zIH0gZnJvbSAnLi92ZXJzaW9ucy5qcyc7XG4vKipcbiAqIFNUT01QIENsaWVudCBDbGFzcy5cbiAqXG4gKiBQYXJ0IG9mIGBAc3RvbXAvc3RvbXBqc2AuXG4gKlxuICogVGhpcyBjbGFzcyBwcm92aWRlcyBhIHJvYnVzdCBpbXBsZW1lbnRhdGlvbiBmb3IgY29ubmVjdGluZyB0byBhbmQgaW50ZXJhY3Rpbmcgd2l0aCBhXG4gKiBTVE9NUC1jb21wbGlhbnQgbWVzc2FnaW5nIGJyb2tlciBvdmVyIFdlYlNvY2tldC4gSXQgc3VwcG9ydHMgU1RPTVAgdmVyc2lvbnMgMS4yLCAxLjEsIGFuZCAxLjAuXG4gKlxuICogRmVhdHVyZXM6XG4gKiAtIEhhbmRsZXMgYXV0b21hdGljIHJlY29ubmVjdGlvbnMuXG4gKiAtIFN1cHBvcnRzIGhlYXJ0YmVhdCBtZWNoYW5pc21zIHRvIGRldGVjdCBhbmQgcmVwb3J0IGNvbW11bmljYXRpb24gZmFpbHVyZXMuXG4gKiAtIEFsbG93cyBjdXN0b21pemF0aW9uIG9mIGNvbm5lY3Rpb24gYW5kIFdlYlNvY2tldCBiZWhhdmlvcnMgdGhyb3VnaCBjb25maWd1cmF0aW9ucy5cbiAqIC0gQ29tcGF0aWJsZSB3aXRoIGJvdGggYnJvd3NlciBlbnZpcm9ubWVudHMgYW5kIE5vZGUuanMgd2l0aCBwb2x5ZmlsbCBzdXBwb3J0IGZvciBXZWJTb2NrZXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGllbnQge1xuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgdW5kZXJseWluZyBXZWJTb2NrZXQgaW5zdGFuY2UuXG4gICAgICogVGhpcyBwcm9wZXJ0eSBpcyAqKnJlYWQtb25seSoqLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogY29uc3Qgd2ViU29ja2V0ID0gY2xpZW50LndlYlNvY2tldDtcbiAgICAgKiBpZiAod2ViU29ja2V0KSB7XG4gICAgICogICBjb25zb2xlLmxvZygnV2ViU29ja2V0IGlzIGNvbm5lY3RlZDonLCB3ZWJTb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICoqQ2F1dGlvbjoqKlxuICAgICAqIERpcmVjdGx5IGludGVyYWN0aW5nIHdpdGggdGhlIFdlYlNvY2tldCBpbnN0YW5jZSAoZS5nLiwgc2VuZGluZyBvciByZWNlaXZpbmcgZnJhbWVzKVxuICAgICAqIGNhbiBpbnRlcmZlcmUgd2l0aCB0aGUgcHJvcGVyIGZ1bmN0aW9uaW5nIG9mIHRoaXMgbGlicmFyeS4gU3VjaCBhY3Rpb25zIG1heSBjYXVzZVxuICAgICAqIHVuZXhwZWN0ZWQgYmVoYXZpb3IsIGRpc2Nvbm5lY3Rpb25zLCBvciBpbnZhbGlkIHN0YXRlIGluIHRoZSBsaWJyYXJ5J3MgaW50ZXJuYWwgbWVjaGFuaXNtcy5cbiAgICAgKlxuICAgICAqIEluc3RlYWQsIHVzZSB0aGUgbGlicmFyeSdzIHByb3ZpZGVkIG1ldGhvZHMgdG8gbWFuYWdlIFNUT01QIGNvbW11bmljYXRpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgV2ViU29ja2V0IGluc3RhbmNlIHVzZWQgYnkgdGhlIFNUT01QIGhhbmRsZXIsIG9yIGB1bmRlZmluZWRgIGlmIG5vdCBjb25uZWN0ZWQuXG4gICAgICovXG4gICAgZ2V0IHdlYlNvY2tldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0b21wSGFuZGxlcj8uX3dlYlNvY2tldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxsb3dzIGN1c3RvbWl6YXRpb24gb2YgdGhlIGRpc2Nvbm5lY3Rpb24gaGVhZGVycy5cbiAgICAgKlxuICAgICAqIEFueSBjaGFuZ2VzIG1hZGUgZHVyaW5nIGFuIGFjdGl2ZSBzZXNzaW9uIHdpbGwgYWxzbyBiZSBhcHBsaWVkIGltbWVkaWF0ZWx5LlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogY2xpZW50LmRpc2Nvbm5lY3RIZWFkZXJzID0ge1xuICAgICAqICAgcmVjZWlwdDogJ2N1c3RvbS1yZWNlaXB0LWlkJ1xuICAgICAqIH07XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGRpc2Nvbm5lY3RIZWFkZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzY29ubmVjdEhlYWRlcnM7XG4gICAgfVxuICAgIHNldCBkaXNjb25uZWN0SGVhZGVycyh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9kaXNjb25uZWN0SGVhZGVycyA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fc3RvbXBIYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9zdG9tcEhhbmRsZXIuZGlzY29ubmVjdEhlYWRlcnMgPSB0aGlzLl9kaXNjb25uZWN0SGVhZGVycztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGVyZSBpcyBhbiBhY3RpdmUgY29ubmVjdGlvbiB0byB0aGUgU1RPTVAgYnJva2VyLlxuICAgICAqXG4gICAgICogVXNhZ2U6XG4gICAgICogYGBgamF2YXNjcmlwdFxuICAgICAqIGlmIChjbGllbnQuY29ubmVjdGVkKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnQ2xpZW50IGlzIGNvbm5lY3RlZCB0byB0aGUgYnJva2VyLicpO1xuICAgICAqIH0gZWxzZSB7XG4gICAgICogICBjb25zb2xlLmxvZygnTm8gY29ubmVjdGlvbiB0byB0aGUgYnJva2VyLicpO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgY2xpZW50IGlzIGN1cnJlbnRseSBjb25uZWN0ZWQsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGdldCBjb25uZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX3N0b21wSGFuZGxlciAmJiB0aGlzLl9zdG9tcEhhbmRsZXIuY29ubmVjdGVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgdmVyc2lvbiBvZiB0aGUgU1RPTVAgcHJvdG9jb2wgbmVnb3RpYXRlZCB3aXRoIHRoZSBzZXJ2ZXIgZHVyaW5nIGNvbm5lY3Rpb24uXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIGEgKipyZWFkLW9ubHkqKiBwcm9wZXJ0eSBhbmQgcmVmbGVjdHMgdGhlIG5lZ290aWF0ZWQgcHJvdG9jb2wgdmVyc2lvbiBhZnRlclxuICAgICAqIGEgc3VjY2Vzc2Z1bCBjb25uZWN0aW9uLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogY29uc29sZS5sb2coJ0Nvbm5lY3RlZCBTVE9NUCB2ZXJzaW9uOicsIGNsaWVudC5jb25uZWN0ZWRWZXJzaW9uKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBuZWdvdGlhdGVkIFNUT01QIHByb3RvY29sIHZlcnNpb24gb3IgYHVuZGVmaW5lZGAgaWYgbm90IGNvbm5lY3RlZC5cbiAgICAgKi9cbiAgICBnZXQgY29ubmVjdGVkVmVyc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0b21wSGFuZGxlciA/IHRoaXMuX3N0b21wSGFuZGxlci5jb25uZWN0ZWRWZXJzaW9uIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY2xpZW50IGlzIGN1cnJlbnRseSBhY3RpdmUuXG4gICAgICpcbiAgICAgKiBBIGNsaWVudCBpcyBjb25zaWRlcmVkIGFjdGl2ZSBpZiBpdCBpcyBjb25uZWN0ZWQgb3IgYWN0aXZlbHkgYXR0ZW1wdGluZyB0byByZWNvbm5lY3QuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiBpZiAoY2xpZW50LmFjdGl2ZSkge1xuICAgICAqICAgY29uc29sZS5sb2coJ1RoZSBjbGllbnQgaXMgYWN0aXZlLicpO1xuICAgICAqIH0gZWxzZSB7XG4gICAgICogICBjb25zb2xlLmxvZygnVGhlIGNsaWVudCBpcyBpbmFjdGl2ZS4nKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGNsaWVudCBpcyBhY3RpdmUsIG90aGVyd2lzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGdldCBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlID09PSBBY3RpdmF0aW9uU3RhdGUuQUNUSVZFO1xuICAgIH1cbiAgICBfY2hhbmdlU3RhdGUoc3RhdGUpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlU3RhdGUoc3RhdGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFNUT01QIGNsaWVudCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIFRoZSBjb25zdHJ1Y3RvciBpbml0aWFsaXplcyBkZWZhdWx0IHZhbHVlcyBhbmQgc2V0cyB1cCBuby1vcCBjYWxsYmFja3MgZm9yIGFsbCBldmVudHMuXG4gICAgICogQ29uZmlndXJhdGlvbiBjYW4gYmUgcGFzc2VkIGR1cmluZyBjb25zdHJ1Y3Rpb24sIG9yIHVwZGF0ZWQgbGF0ZXIgdXNpbmcgYGNvbmZpZ3VyZWAuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiBjb25zdCBjbGllbnQgPSBuZXcgQ2xpZW50KHtcbiAgICAgKiAgIGJyb2tlclVSTDogJ3dzczovL2Jyb2tlci5leGFtcGxlLmNvbScsXG4gICAgICogICByZWNvbm5lY3REZWxheTogNTAwMFxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmYgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3QgdG8gaW5pdGlhbGl6ZSB0aGUgY2xpZW50IHdpdGguXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29uZiA9IHt9KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTVE9NUCBwcm90b2NvbCB2ZXJzaW9ucyB0byB1c2UgZHVyaW5nIHRoZSBoYW5kc2hha2UuIEJ5IGRlZmF1bHQsIHRoZSBjbGllbnQgd2lsbCBhdHRlbXB0XG4gICAgICAgICAqIHZlcnNpb25zIGAxLjJgLCBgMS4xYCwgYW5kIGAxLjBgIGluIGRlc2NlbmRpbmcgb3JkZXIgb2YgcHJlZmVyZW5jZS5cbiAgICAgICAgICpcbiAgICAgICAgICogRXhhbXBsZTpcbiAgICAgICAgICogYGBgamF2YXNjcmlwdFxuICAgICAgICAgKiAvLyBDb25maWd1cmUgdGhlIGNsaWVudCB0byBvbmx5IHVzZSB2ZXJzaW9ucyAxLjEgYW5kIDEuMFxuICAgICAgICAgKiBjbGllbnQuc3RvbXBWZXJzaW9ucyA9IG5ldyBWZXJzaW9ucyhbJzEuMScsICcxLjAnXSk7XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdG9tcFZlcnNpb25zID0gVmVyc2lvbnMuZGVmYXVsdDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRpbWVvdXQgZm9yIGVzdGFibGlzaGluZyBTVE9NUCBjb25uZWN0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIHRoZSBjb25uZWN0aW9uIGlzIG5vdCBlc3RhYmxpc2hlZCB3aXRoaW4gdGhpcyBwZXJpb2QsIHRoZSBhdHRlbXB0IHdpbGwgZmFpbC5cbiAgICAgICAgICogVGhlIGRlZmF1bHQgaXMgYDBgLCBtZWFuaW5nIG5vIHRpbWVvdXQgaXMgc2V0IGZvciBjb25uZWN0aW9uIGF0dGVtcHRzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBFeGFtcGxlOlxuICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICAgICAqIGNsaWVudC5jb25uZWN0aW9uVGltZW91dCA9IDUwMDA7IC8vIEZhaWwgY29ubmVjdGlvbiBpZiBub3QgZXN0YWJsaXNoZWQgaW4gNSBzZWNvbmRzXG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb25uZWN0aW9uVGltZW91dCA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWxheSAoaW4gbWlsbGlzZWNvbmRzKSBiZXR3ZWVuIHJlY29ubmVjdGlvbiBhdHRlbXB0cyBpZiB0aGUgY29ubmVjdGlvbiBkcm9wcy5cbiAgICAgICAgICpcbiAgICAgICAgICogU2V0IHRvIGAwYCB0byBkaXNhYmxlIGF1dG9tYXRpYyByZWNvbm5lY3Rpb25zLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgNTAwMGAgbXMgKDUgc2Vjb25kcykuXG4gICAgICAgICAqXG4gICAgICAgICAqIEV4YW1wbGU6XG4gICAgICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgICAgICogY2xpZW50LnJlY29ubmVjdERlbGF5ID0gMzAwMDsgLy8gQXR0ZW1wdCByZWNvbm5lY3Rpb24gZXZlcnkgMyBzZWNvbmRzXG4gICAgICAgICAqIGNsaWVudC5yZWNvbm5lY3REZWxheSA9IDA7IC8vIERpc2FibGUgYXV0b21hdGljIHJlY29ubmVjdGlvblxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVjb25uZWN0RGVsYXkgPSA1MDAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG5leHQgcmVjb25uZWN0aW9uIGRlbGF5LCB1c2VkIGludGVybmFsbHkuXG4gICAgICAgICAqIEluaXRpYWxpemVkIHRvIHRoZSB2YWx1ZSBvZiBbQ2xpZW50I3JlY29ubmVjdERlbGF5XXtAbGluayBDbGllbnQjcmVjb25uZWN0RGVsYXl9LCBhbmQgaXQgbWF5XG4gICAgICAgICAqIGR5bmFtaWNhbGx5IGNoYW5nZSBiYXNlZCBvbiBbQ2xpZW50I3JlY29ubmVjdFRpbWVNb2RlXXtAbGluayBDbGllbnQjcmVjb25uZWN0VGltZU1vZGV9LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbmV4dFJlY29ubmVjdERlbGF5ID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1heGltdW0gZGVsYXkgKGluIG1pbGxpc2Vjb25kcykgYmV0d2VlbiByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgd2hlbiB1c2luZyBleHBvbmVudGlhbCBiYWNrb2ZmLlxuICAgICAgICAgKlxuICAgICAgICAgKiBEZWZhdWx0IGlzIDE1IG1pbnV0ZXMgKGAxNSAqIDYwICogMTAwMGAgbWlsbGlzZWNvbmRzKS4gSWYgYDBgLCB0aGVyZSB3aWxsIGJlIG5vIHVwcGVyIGxpbWl0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBFeGFtcGxlOlxuICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICAgICAqIGNsaWVudC5tYXhSZWNvbm5lY3REZWxheSA9IDEwMDAwOyAvLyBNYXhpbXVtIHdhaXQgdGltZSBpcyAxMCBzZWNvbmRzXG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tYXhSZWNvbm5lY3REZWxheSA9IDE1ICogNjAgKiAxMDAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogTW9kZSBmb3IgZGV0ZXJtaW5pbmcgdGhlIHRpbWUgaW50ZXJ2YWwgYmV0d2VlbiByZWNvbm5lY3Rpb24gYXR0ZW1wdHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEF2YWlsYWJsZSBtb2RlczpcbiAgICAgICAgICogLSBgUmVjb25uZWN0aW9uVGltZU1vZGUuTElORUFSYCAoZGVmYXVsdCk6IEZpeGVkIGRlbGF5cyBiZXR3ZWVuIHJlY29ubmVjdGlvbiBhdHRlbXB0cy5cbiAgICAgICAgICogLSBgUmVjb25uZWN0aW9uVGltZU1vZGUuRVhQT05FTlRJQUxgOiBEZWxheSBkb3VibGVzIGFmdGVyIGVhY2ggYXR0ZW1wdCwgY2FwcGVkIGJ5IFttYXhSZWNvbm5lY3REZWxheV17QGxpbmsgQ2xpZW50I21heFJlY29ubmVjdERlbGF5fS5cbiAgICAgICAgICpcbiAgICAgICAgICogRXhhbXBsZTpcbiAgICAgICAgICogYGBgamF2YXNjcmlwdFxuICAgICAgICAgKiBjbGllbnQucmVjb25uZWN0VGltZU1vZGUgPSBSZWNvbm5lY3Rpb25UaW1lTW9kZS5FWFBPTkVOVElBTDtcbiAgICAgICAgICogY2xpZW50LnJlY29ubmVjdERlbGF5ID0gMjAwOyAvLyBJbml0aWFsIGRlbGF5IG9mIDIwMCBtcywgZG91YmxlcyB3aXRoIGVhY2ggYXR0ZW1wdFxuICAgICAgICAgKiBjbGllbnQubWF4UmVjb25uZWN0RGVsYXkgPSAyICogNjAgKiAxMDAwOyAvLyBDYXAgZGVsYXkgYXQgMTAgbWludXRlc1xuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVjb25uZWN0VGltZU1vZGUgPSBSZWNvbm5lY3Rpb25UaW1lTW9kZS5MSU5FQVI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnRlcnZhbCAoaW4gbWlsbGlzZWNvbmRzKSBmb3IgcmVjZWl2aW5nIGhlYXJ0YmVhdCBzaWduYWxzIGZyb20gdGhlIHNlcnZlci5cbiAgICAgICAgICpcbiAgICAgICAgICogU3BlY2lmaWVzIHRoZSBleHBlY3RlZCBmcmVxdWVuY3kgb2YgaGVhcnRiZWF0cyBzZW50IGJ5IHRoZSBzZXJ2ZXIuIFNldCB0byBgMGAgdG8gZGlzYWJsZS5cbiAgICAgICAgICpcbiAgICAgICAgICogRXhhbXBsZTpcbiAgICAgICAgICogYGBgamF2YXNjcmlwdFxuICAgICAgICAgKiBjbGllbnQuaGVhcnRiZWF0SW5jb21pbmcgPSAxMDAwMDsgLy8gRXhwZWN0IGEgaGVhcnRiZWF0IGV2ZXJ5IDEwIHNlY29uZHNcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmhlYXJ0YmVhdEluY29taW5nID0gMTAwMDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNdWx0aXBsaWVyIGZvciBhZGp1c3RpbmcgdG9sZXJhbmNlIHdoZW4gcHJvY2Vzc2luZyBoZWFydGJlYXQgc2lnbmFscy5cbiAgICAgICAgICpcbiAgICAgICAgICogVG9sZXJhbmNlIGxldmVsIGlzIGNhbGN1bGF0ZWQgdXNpbmcgdGhlIG11bHRpcGxpZXI6XG4gICAgICAgICAqIGB0b2xlcmFuY2UgPSBoZWFydGJlYXRJbmNvbWluZyAqIGhlYXJ0YmVhdFRvbGVyYW5jZU11bHRpcGxpZXJgLlxuICAgICAgICAgKiBUaGlzIGhlbHBzIGFjY291bnQgZm9yIGRlbGF5cyBpbiBuZXR3b3JrIGNvbW11bmljYXRpb24gb3IgdmFyaWF0aW9ucyBpbiB0aW1pbmdzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGAyYC5cbiAgICAgICAgICpcbiAgICAgICAgICogRXhhbXBsZTpcbiAgICAgICAgICogYGBgamF2YXNjcmlwdFxuICAgICAgICAgKiBjbGllbnQuaGVhcnRiZWF0VG9sZXJhbmNlTXVsdGlwbGllciA9IDIuNTsgLy8gVG9sZXJhdGVzIGxvbmdlciBkZWxheXNcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmhlYXJ0YmVhdFRvbGVyYW5jZU11bHRpcGxpZXIgPSAyO1xuICAgICAgICAvKipcbiAgICAgICAgICogSW50ZXJ2YWwgKGluIG1pbGxpc2Vjb25kcykgZm9yIHNlbmRpbmcgaGVhcnRiZWF0IHNpZ25hbHMgdG8gdGhlIHNlcnZlci5cbiAgICAgICAgICpcbiAgICAgICAgICogU3BlY2lmaWVzIGhvdyBmcmVxdWVudGx5IGhlYXJ0YmVhdHMgc2hvdWxkIGJlIHNlbnQgdG8gdGhlIHNlcnZlci4gU2V0IHRvIGAwYCB0byBkaXNhYmxlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBFeGFtcGxlOlxuICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICAgICAqIGNsaWVudC5oZWFydGJlYXRPdXRnb2luZyA9IDUwMDA7IC8vIFNlbmQgYSBoZWFydGJlYXQgZXZlcnkgNSBzZWNvbmRzXG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oZWFydGJlYXRPdXRnb2luZyA9IDEwMDAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RyYXRlZ3kgZm9yIHNlbmRpbmcgb3V0Z29pbmcgaGVhcnRiZWF0cy5cbiAgICAgICAgICpcbiAgICAgICAgICogT3B0aW9uczpcbiAgICAgICAgICogLSBgVGlja2VyU3RyYXRlZ3kuV29ya2VyYDogVXNlcyBXZWIgV29ya2VycyBmb3Igc2VuZGluZyBoZWFydGJlYXRzIChyZWNvbW1lbmRlZCBmb3IgbG9uZy1ydW5uaW5nIG9yIGJhY2tncm91bmQgc2Vzc2lvbnMpLlxuICAgICAgICAgKiAtIGBUaWNrZXJTdHJhdGVneS5JbnRlcnZhbGA6IFVzZXMgc3RhbmRhcmQgSmF2YVNjcmlwdCBgc2V0SW50ZXJ2YWxgIChkZWZhdWx0KS5cbiAgICAgICAgICpcbiAgICAgICAgICogTm90ZTpcbiAgICAgICAgICogLSBJZiBXZWIgV29ya2VycyBhcmUgdW5hdmFpbGFibGUgKGUuZy4sIGluIE5vZGUuanMpLCB0aGUgYEludGVydmFsYCBzdHJhdGVneSBpcyB1c2VkIGF1dG9tYXRpY2FsbHkuXG4gICAgICAgICAqIC0gV2ViIFdvcmtlcnMgYXJlIHByZWZlcmFibGUgaW4gYnJvd3NlcnMgZm9yIHJlZHVjaW5nIGRpc2Nvbm5lY3RzIHdoZW4gdGFicyBhcmUgaW4gdGhlIGJhY2tncm91bmQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEV4YW1wbGU6XG4gICAgICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgICAgICogY2xpZW50LmhlYXJ0YmVhdFN0cmF0ZWd5ID0gVGlja2VyU3RyYXRlZ3kuV29ya2VyO1xuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaGVhcnRiZWF0U3RyYXRlZ3kgPSBUaWNrZXJTdHJhdGVneS5JbnRlcnZhbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZXMgc3BsaXR0aW5nIG9mIGxhcmdlIHRleHQgV2ViU29ja2V0IGZyYW1lcyBpbnRvIHNtYWxsZXIgY2h1bmtzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIHNldHRpbmcgaXMgZW5hYmxlZCBmb3IgYnJva2VycyB0aGF0IHN1cHBvcnQgb25seSBjaHVua2VkIG1lc3NhZ2VzIChlLmcuLCBKYXZhIFNwcmluZy1iYXNlZCBicm9rZXJzKS5cbiAgICAgICAgICogRGVmYXVsdCBpcyBgZmFsc2VgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBXYXJuaW5nOlxuICAgICAgICAgKiAtIFNob3VsZCBub3QgYmUgdXNlZCB3aXRoIFdlYlNvY2tldC1jb21wbGlhbnQgYnJva2VycywgYXMgY2h1bmtpbmcgbWF5IGNhdXNlIGxhcmdlIG1lc3NhZ2UgZmFpbHVyZXMuXG4gICAgICAgICAqIC0gQmluYXJ5IFdlYlNvY2tldCBmcmFtZXMgYXJlIG5ldmVyIHNwbGl0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBFeGFtcGxlOlxuICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICAgICAqIGNsaWVudC5zcGxpdExhcmdlRnJhbWVzID0gdHJ1ZTtcbiAgICAgICAgICogY2xpZW50Lm1heFdlYlNvY2tldENodW5rU2l6ZSA9IDQwOTY7IC8vIEFsbG93IGNodW5rcyBvZiA0IEtCXG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zcGxpdExhcmdlRnJhbWVzID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXhpbXVtIHNpemUgKGluIGJ5dGVzKSBmb3IgaW5kaXZpZHVhbCBXZWJTb2NrZXQgY2h1bmtzIGlmIFtzcGxpdExhcmdlRnJhbWVzXXtAbGluayBDbGllbnQjc3BsaXRMYXJnZUZyYW1lc30gaXMgZW5hYmxlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogRGVmYXVsdCBpcyA4IEtCIChgOCAqIDEwMjRgIGJ5dGVzKS4gVGhpcyB2YWx1ZSBoYXMgbm8gZWZmZWN0IGlmIFtzcGxpdExhcmdlRnJhbWVzXXtAbGluayBDbGllbnQjc3BsaXRMYXJnZUZyYW1lc30gaXMgYGZhbHNlYC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWF4V2ViU29ja2V0Q2h1bmtTaXplID0gOCAqIDEwMjQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGb3JjZXMgYWxsIFdlYlNvY2tldCBmcmFtZXMgdG8gdXNlIGJpbmFyeSB0cmFuc3BvcnQsIGlycmVzcGVjdGl2ZSBvZiBwYXlsb2FkIHR5cGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIERlZmF1bHQgYmVoYXZpb3IgZGV0ZXJtaW5lcyBmcmFtZSB0eXBlIGJhc2VkIG9uIHBheWxvYWQgKGUuZy4sIGJpbmFyeSBkYXRhIGZvciBBcnJheUJ1ZmZlcnMpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBFeGFtcGxlOlxuICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICAgICAqIGNsaWVudC5mb3JjZUJpbmFyeVdTRnJhbWVzID0gdHJ1ZTtcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZvcmNlQmluYXJ5V1NGcmFtZXMgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdvcmthcm91bmQgZm9yIGEgUmVhY3QgTmF0aXZlIFdlYlNvY2tldCBidWcsIHdoZXJlIG1lc3NhZ2VzIGNvbnRhaW5pbmcgYE5VTExgIGFyZSBjaG9wcGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBFbmFibGluZyB0aGlzIGFwcGVuZHMgYSBgTlVMTGAgY2hhcmFjdGVyIHRvIGluY29taW5nIGZyYW1lcyB0byBlbnN1cmUgdGhleSByZW1haW4gdmFsaWQgU1RPTVAgcGFja2V0cy5cbiAgICAgICAgICpcbiAgICAgICAgICogV2FybmluZzpcbiAgICAgICAgICogLSBGb3IgYnJva2VycyB0aGF0IHNwbGl0IGxhcmdlIG1lc3NhZ2VzLCB0aGlzIG1heSBjYXVzZSBkYXRhIGxvc3Mgb3IgY29ubmVjdGlvbiB0ZXJtaW5hdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogRXhhbXBsZTpcbiAgICAgICAgICogYGBgamF2YXNjcmlwdFxuICAgICAgICAgKiBjbGllbnQuYXBwZW5kTWlzc2luZ05VTExvbkluY29taW5nID0gdHJ1ZTtcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFwcGVuZE1pc3NpbmdOVUxMb25JbmNvbWluZyA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogSW5zdHJ1Y3QgdGhlIGxpYnJhcnkgdG8gaW1tZWRpYXRlbHkgdGVybWluYXRlIHRoZSBzb2NrZXQgb24gY29tbXVuaWNhdGlvbiBmYWlsdXJlcywgZXZlblxuICAgICAgICAgKiBiZWZvcmUgdGhlIFdlYlNvY2tldCBpcyBjb21wbGV0ZWx5IGNsb3NlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGluIGJyb3dzZXIgZW52aXJvbm1lbnRzIHdoZXJlIFdlYlNvY2tldCBjbG9zdXJlIG1heSBnZXQgZGVsYXllZCxcbiAgICAgICAgICogY2F1c2luZyBwcm9sb25nZWQgcmVjb25uZWN0aW9uIGludGVydmFscyB1bmRlciBjZXJ0YWluIGZhaWx1cmUgY29uZGl0aW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICpcbiAgICAgICAgICogRXhhbXBsZTpcbiAgICAgICAgICogYGBgamF2YXNjcmlwdFxuICAgICAgICAgKiBjbGllbnQuZGlzY2FyZFdlYnNvY2tldE9uQ29tbUZhaWx1cmUgPSB0cnVlOyAvLyBFbmFibGUgYWdncmVzc2l2ZSBjbG9zaW5nIG9mIFdlYlNvY2tldFxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICpcbiAgICAgICAgICogRGVmYXVsdCB2YWx1ZTogYGZhbHNlYC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGlzY2FyZFdlYnNvY2tldE9uQ29tbUZhaWx1cmUgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEN1cnJlbnQgYWN0aXZhdGlvbiBzdGF0ZSBvZiB0aGUgY2xpZW50LlxuICAgICAgICAgKlxuICAgICAgICAgKiBQb3NzaWJsZSBzdGF0ZXM6XG4gICAgICAgICAqIC0gYEFjdGl2YXRpb25TdGF0ZS5BQ1RJVkVgOiBDbGllbnQgaXMgY29ubmVjdGVkIG9yIGFjdGl2ZWx5IGF0dGVtcHRpbmcgdG8gY29ubmVjdC5cbiAgICAgICAgICogLSBgQWN0aXZhdGlvblN0YXRlLklOQUNUSVZFYDogQ2xpZW50IGlzIGRpc2Nvbm5lY3RlZCBhbmQgbm90IGF0dGVtcHRpbmcgdG8gcmVjb25uZWN0LlxuICAgICAgICAgKiAtIGBBY3RpdmF0aW9uU3RhdGUuREVBQ1RJVkFUSU5HYDogQ2xpZW50IGlzIGluIHRoZSBwcm9jZXNzIG9mIGRpc2Nvbm5lY3RpbmcuXG4gICAgICAgICAqXG4gICAgICAgICAqIE5vdGU6IFRoZSBjbGllbnQgbWF5IHRyYW5zaXRpb24gZGlyZWN0bHkgZnJvbSBgQUNUSVZFYCB0byBgSU5BQ1RJVkVgIHdpdGhvdXQgZW50ZXJpbmdcbiAgICAgICAgICogdGhlIGBERUFDVElWQVRJTkdgIHN0YXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGF0ZSA9IEFjdGl2YXRpb25TdGF0ZS5JTkFDVElWRTtcbiAgICAgICAgLy8gTm8gb3AgY2FsbGJhY2tzXG4gICAgICAgIGNvbnN0IG5vT3AgPSAoKSA9PiB7IH07XG4gICAgICAgIHRoaXMuZGVidWcgPSBub09wO1xuICAgICAgICB0aGlzLmJlZm9yZUNvbm5lY3QgPSBub09wO1xuICAgICAgICB0aGlzLm9uQ29ubmVjdCA9IG5vT3A7XG4gICAgICAgIHRoaXMub25EaXNjb25uZWN0ID0gbm9PcDtcbiAgICAgICAgdGhpcy5vblVuaGFuZGxlZE1lc3NhZ2UgPSBub09wO1xuICAgICAgICB0aGlzLm9uVW5oYW5kbGVkUmVjZWlwdCA9IG5vT3A7XG4gICAgICAgIHRoaXMub25VbmhhbmRsZWRGcmFtZSA9IG5vT3A7XG4gICAgICAgIHRoaXMub25IZWFydGJlYXRSZWNlaXZlZCA9IG5vT3A7XG4gICAgICAgIHRoaXMub25IZWFydGJlYXRMb3N0ID0gbm9PcDtcbiAgICAgICAgdGhpcy5vblN0b21wRXJyb3IgPSBub09wO1xuICAgICAgICB0aGlzLm9uV2ViU29ja2V0Q2xvc2UgPSBub09wO1xuICAgICAgICB0aGlzLm9uV2ViU29ja2V0RXJyb3IgPSBub09wO1xuICAgICAgICB0aGlzLmxvZ1Jhd0NvbW11bmljYXRpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZVN0YXRlID0gbm9PcDtcbiAgICAgICAgLy8gVGhlc2UgcGFyYW1ldGVycyB3b3VsZCB0eXBpY2FsbHkgZ2V0IHByb3BlciB2YWx1ZXMgYmVmb3JlIGNvbm5lY3QgaXMgY2FsbGVkXG4gICAgICAgIHRoaXMuY29ubmVjdEhlYWRlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5fZGlzY29ubmVjdEhlYWRlcnMgPSB7fTtcbiAgICAgICAgLy8gQXBwbHkgY29uZmlndXJhdGlvblxuICAgICAgICB0aGlzLmNvbmZpZ3VyZShjb25mKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY2xpZW50J3MgY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEFsbCBwcm9wZXJ0aWVzIGluIHRoZSBwcm92aWRlZCBjb25maWd1cmF0aW9uIG9iamVjdCB3aWxsIG92ZXJyaWRlIHRoZSBjdXJyZW50IHNldHRpbmdzLlxuICAgICAqXG4gICAgICogQWRkaXRpb25hbGx5LCBhIHdhcm5pbmcgaXMgbG9nZ2VkIGlmIGBtYXhSZWNvbm5lY3REZWxheWAgaXMgY29uZmlndXJlZCB0byBhXG4gICAgICogdmFsdWUgbG93ZXIgdGhhbiBgcmVjb25uZWN0RGVsYXlgLCBhbmQgYG1heFJlY29ubmVjdERlbGF5YCBpcyBhZGp1c3RlZCB0byBtYXRjaCBgcmVjb25uZWN0RGVsYXlgLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogY2xpZW50LmNvbmZpZ3VyZSh7XG4gICAgICogICByZWNvbm5lY3REZWxheTogMzAwMCxcbiAgICAgKiAgIG1heFJlY29ubmVjdERlbGF5OiAxMDAwMFxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmYgQ29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbmluZyB0aGUgbmV3IHNldHRpbmdzLlxuICAgICAqL1xuICAgIGNvbmZpZ3VyZShjb25mKSB7XG4gICAgICAgIC8vIGJ1bGsgYXNzaWduIGFsbCBwcm9wZXJ0aWVzIHRvIHRoaXNcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjb25mKTtcbiAgICAgICAgLy8gV2FybiBvbiBpbmNvcnJlY3QgbWF4UmVjb25uZWN0RGVsYXkgc2V0dGluZ3NcbiAgICAgICAgaWYgKHRoaXMubWF4UmVjb25uZWN0RGVsYXkgPiAwICYmXG4gICAgICAgICAgICB0aGlzLm1heFJlY29ubmVjdERlbGF5IDwgdGhpcy5yZWNvbm5lY3REZWxheSkge1xuICAgICAgICAgICAgdGhpcy5kZWJ1ZyhgV2FybmluZzogbWF4UmVjb25uZWN0RGVsYXkgKCR7dGhpcy5tYXhSZWNvbm5lY3REZWxheX1tcykgaXMgbGVzcyB0aGFuIHJlY29ubmVjdERlbGF5ICgke3RoaXMucmVjb25uZWN0RGVsYXl9bXMpLiBVc2luZyByZWNvbm5lY3REZWxheSBhcyB0aGUgbWF4UmVjb25uZWN0RGVsYXkgZGVsYXkuYCk7XG4gICAgICAgICAgICB0aGlzLm1heFJlY29ubmVjdERlbGF5ID0gdGhpcy5yZWNvbm5lY3REZWxheTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBY3RpdmF0ZXMgdGhlIGNsaWVudCwgaW5pdGlhdGluZyBhIGNvbm5lY3Rpb24gdG8gdGhlIFNUT01QIGJyb2tlci5cbiAgICAgKlxuICAgICAqIE9uIGFjdGl2YXRpb24sIHRoZSBjbGllbnQgYXR0ZW1wdHMgdG8gY29ubmVjdCBhbmQgc2V0cyBpdHMgc3RhdGUgdG8gYEFDVElWRWAuIElmIHRoZSBjb25uZWN0aW9uXG4gICAgICogaXMgbG9zdCwgaXQgd2lsbCBhdXRvbWF0aWNhbGx5IHJldHJ5IGJhc2VkIG9uIGByZWNvbm5lY3REZWxheWAgb3IgYG1heFJlY29ubmVjdERlbGF5YC4gSWZcbiAgICAgKiBgcmVjb25uZWN0VGltZU1vZGVgIGlzIHNldCB0byBgRVhQT05FTlRJQUxgLCB0aGUgcmVjb25uZWN0IGRlbGF5IGluY3JlYXNlcyBleHBvbmVudGlhbGx5LlxuICAgICAqXG4gICAgICogVG8gc3RvcCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgYW5kIGRpc2Nvbm5lY3QsIGNhbGwgW0NsaWVudCNkZWFjdGl2YXRlXXtAbGluayBDbGllbnQjZGVhY3RpdmF0ZX0uXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiBjbGllbnQuYWN0aXZhdGUoKTsgLy8gQ29ubmVjdCB0byB0aGUgYnJva2VyXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBJZiB0aGUgY2xpZW50IGlzIGN1cnJlbnRseSBgREVBQ1RJVkFUSU5HYCwgY29ubmVjdGlvbiBpcyBkZWxheWVkIHVudGlsIHRoZSBkZWFjdGl2YXRpb24gcHJvY2VzcyBjb21wbGV0ZXMuXG4gICAgICovXG4gICAgYWN0aXZhdGUoKSB7XG4gICAgICAgIGNvbnN0IF9hY3RpdmF0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVidWcoJ0FscmVhZHkgQUNUSVZFLCBpZ25vcmluZyByZXF1ZXN0IHRvIGFjdGl2YXRlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY2hhbmdlU3RhdGUoQWN0aXZhdGlvblN0YXRlLkFDVElWRSk7XG4gICAgICAgICAgICB0aGlzLl9uZXh0UmVjb25uZWN0RGVsYXkgPSB0aGlzLnJlY29ubmVjdERlbGF5O1xuICAgICAgICAgICAgdGhpcy5fY29ubmVjdCgpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBpZiBpdCBpcyBkZWFjdGl2YXRpbmcsIHdhaXQgZm9yIGl0IHRvIGNvbXBsZXRlIGJlZm9yZSBhY3RpdmF0aW5nLlxuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gQWN0aXZhdGlvblN0YXRlLkRFQUNUSVZBVElORykge1xuICAgICAgICAgICAgdGhpcy5kZWJ1ZygnV2FpdGluZyBmb3IgZGVhY3RpdmF0aW9uIHRvIGZpbmlzaCBiZWZvcmUgYWN0aXZhdGluZycpO1xuICAgICAgICAgICAgdGhpcy5kZWFjdGl2YXRlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgX2FjdGl2YXRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9hY3RpdmF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9jb25uZWN0KCkge1xuICAgICAgICBhd2FpdCB0aGlzLmJlZm9yZUNvbm5lY3QodGhpcyk7XG4gICAgICAgIGlmICh0aGlzLl9zdG9tcEhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVidWcoJ1RoZXJlIGlzIGFscmVhZHkgYSBzdG9tcEhhbmRsZXIsIHNraXBwaW5nIHRoZSBjYWxsIHRvIGNvbm5lY3QnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLmRlYnVnKCdDbGllbnQgaGFzIGJlZW4gbWFya2VkIGluYWN0aXZlLCB3aWxsIG5vdCBhdHRlbXB0IHRvIGNvbm5lY3QnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBzZXR1cCBjb25uZWN0aW9uIHdhdGNoZXJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgICAvLyBjbGVhciBmaXJzdFxuICAgICAgICAgICAgaWYgKHRoaXMuX2Nvbm5lY3Rpb25XYXRjaGVyKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2Nvbm5lY3Rpb25XYXRjaGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3Rpb25XYXRjaGVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQ29ubmVjdGlvbiBub3QgZXN0YWJsaXNoZWQsIGNsb3NlIHRoZSB1bmRlcmx5aW5nIHNvY2tldFxuICAgICAgICAgICAgICAgIC8vIGEgcmVjb25uZWN0aW9uIHdpbGwgYmUgYXR0ZW1wdGVkXG4gICAgICAgICAgICAgICAgdGhpcy5kZWJ1ZyhgQ29ubmVjdGlvbiBub3QgZXN0YWJsaXNoZWQgaW4gJHt0aGlzLmNvbm5lY3Rpb25UaW1lb3V0fW1zLCBjbG9zaW5nIHNvY2tldGApO1xuICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VEaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB9LCB0aGlzLmNvbm5lY3Rpb25UaW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlYnVnKCdPcGVuaW5nIFdlYiBTb2NrZXQuLi4nKTtcbiAgICAgICAgLy8gR2V0IHRoZSBhY3R1YWwgV2ViU29ja2V0IChvciBhIHNpbWlsYXIgb2JqZWN0KVxuICAgICAgICBjb25zdCB3ZWJTb2NrZXQgPSB0aGlzLl9jcmVhdGVXZWJTb2NrZXQoKTtcbiAgICAgICAgdGhpcy5fc3RvbXBIYW5kbGVyID0gbmV3IFN0b21wSGFuZGxlcih0aGlzLCB3ZWJTb2NrZXQsIHtcbiAgICAgICAgICAgIGRlYnVnOiB0aGlzLmRlYnVnLFxuICAgICAgICAgICAgc3RvbXBWZXJzaW9uczogdGhpcy5zdG9tcFZlcnNpb25zLFxuICAgICAgICAgICAgY29ubmVjdEhlYWRlcnM6IHRoaXMuY29ubmVjdEhlYWRlcnMsXG4gICAgICAgICAgICBkaXNjb25uZWN0SGVhZGVyczogdGhpcy5fZGlzY29ubmVjdEhlYWRlcnMsXG4gICAgICAgICAgICBoZWFydGJlYXRJbmNvbWluZzogdGhpcy5oZWFydGJlYXRJbmNvbWluZyxcbiAgICAgICAgICAgIGhlYXJ0YmVhdEdyYWNlUGVyaW9kczogdGhpcy5oZWFydGJlYXRUb2xlcmFuY2VNdWx0aXBsaWVyLFxuICAgICAgICAgICAgaGVhcnRiZWF0T3V0Z29pbmc6IHRoaXMuaGVhcnRiZWF0T3V0Z29pbmcsXG4gICAgICAgICAgICBoZWFydGJlYXRTdHJhdGVneTogdGhpcy5oZWFydGJlYXRTdHJhdGVneSxcbiAgICAgICAgICAgIHNwbGl0TGFyZ2VGcmFtZXM6IHRoaXMuc3BsaXRMYXJnZUZyYW1lcyxcbiAgICAgICAgICAgIG1heFdlYlNvY2tldENodW5rU2l6ZTogdGhpcy5tYXhXZWJTb2NrZXRDaHVua1NpemUsXG4gICAgICAgICAgICBmb3JjZUJpbmFyeVdTRnJhbWVzOiB0aGlzLmZvcmNlQmluYXJ5V1NGcmFtZXMsXG4gICAgICAgICAgICBsb2dSYXdDb21tdW5pY2F0aW9uOiB0aGlzLmxvZ1Jhd0NvbW11bmljYXRpb24sXG4gICAgICAgICAgICBhcHBlbmRNaXNzaW5nTlVMTG9uSW5jb21pbmc6IHRoaXMuYXBwZW5kTWlzc2luZ05VTExvbkluY29taW5nLFxuICAgICAgICAgICAgZGlzY2FyZFdlYnNvY2tldE9uQ29tbUZhaWx1cmU6IHRoaXMuZGlzY2FyZFdlYnNvY2tldE9uQ29tbUZhaWx1cmUsXG4gICAgICAgICAgICBvbkNvbm5lY3Q6IGZyYW1lID0+IHtcbiAgICAgICAgICAgICAgICAvLyBTdWNjZXNzZnVsbHkgY29ubmVjdGVkLCBzdG9wIHRoZSBjb25uZWN0aW9uIHdhdGNoZXJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29ubmVjdGlvbldhdGNoZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2Nvbm5lY3Rpb25XYXRjaGVyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29ubmVjdGlvbldhdGNoZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWJ1ZygnU1RPTVAgZ290IGNvbm5lY3RlZCB3aGlsZSBkZWFjdGl2YXRlIHdhcyBpc3N1ZWQsIHdpbGwgZGlzY29ubmVjdCBub3cnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzcG9zZVN0b21wSGFuZGxlcigpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMub25Db25uZWN0KGZyYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkRpc2Nvbm5lY3Q6IGZyYW1lID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRGlzY29ubmVjdChmcmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25TdG9tcEVycm9yOiBmcmFtZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vblN0b21wRXJyb3IoZnJhbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uV2ViU29ja2V0Q2xvc2U6IGV2dCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RvbXBIYW5kbGVyID0gdW5kZWZpbmVkOyAvLyBhIG5ldyBvbmUgd2lsbCBiZSBjcmVhdGVkIGluIGNhc2Ugb2YgYSByZWNvbm5lY3RcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gQWN0aXZhdGlvblN0YXRlLkRFQUNUSVZBVElORykge1xuICAgICAgICAgICAgICAgICAgICAvLyBNYXJrIGRlYWN0aXZhdGlvbiBjb21wbGV0ZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VTdGF0ZShBY3RpdmF0aW9uU3RhdGUuSU5BQ1RJVkUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUaGUgY2FsbGJhY2sgaXMgY2FsbGVkIGJlZm9yZSBhdHRlbXB0aW5nIHRvIHJlY29ubmVjdCwgdGhpcyB3b3VsZCBhbGxvdyB0aGUgY2xpZW50XG4gICAgICAgICAgICAgICAgLy8gdG8gYmUgYGRlYWN0aXZhdGVkYCBpbiB0aGUgY2FsbGJhY2suXG4gICAgICAgICAgICAgICAgdGhpcy5vbldlYlNvY2tldENsb3NlKGV2dCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NjaGVkdWxlX3JlY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbldlYlNvY2tldEVycm9yOiBldnQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25XZWJTb2NrZXRFcnJvcihldnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkTWVzc2FnZTogbWVzc2FnZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vblVuaGFuZGxlZE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25VbmhhbmRsZWRSZWNlaXB0OiBmcmFtZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vblVuaGFuZGxlZFJlY2VpcHQoZnJhbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkRnJhbWU6IGZyYW1lID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uVW5oYW5kbGVkRnJhbWUoZnJhbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uSGVhcnRiZWF0UmVjZWl2ZWQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uSGVhcnRiZWF0UmVjZWl2ZWQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkhlYXJ0YmVhdExvc3Q6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uSGVhcnRiZWF0TG9zdCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3N0b21wSGFuZGxlci5zdGFydCgpO1xuICAgIH1cbiAgICBfY3JlYXRlV2ViU29ja2V0KCkge1xuICAgICAgICBsZXQgd2ViU29ja2V0O1xuICAgICAgICBpZiAodGhpcy53ZWJTb2NrZXRGYWN0b3J5KSB7XG4gICAgICAgICAgICB3ZWJTb2NrZXQgPSB0aGlzLndlYlNvY2tldEZhY3RvcnkoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmJyb2tlclVSTCkge1xuICAgICAgICAgICAgd2ViU29ja2V0ID0gbmV3IFdlYlNvY2tldCh0aGlzLmJyb2tlclVSTCwgdGhpcy5zdG9tcFZlcnNpb25zLnByb3RvY29sVmVyc2lvbnMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VpdGhlciBicm9rZXJVUkwgb3Igd2ViU29ja2V0RmFjdG9yeSBtdXN0IGJlIHByb3ZpZGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgd2ViU29ja2V0LmJpbmFyeVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICByZXR1cm4gd2ViU29ja2V0O1xuICAgIH1cbiAgICBfc2NoZWR1bGVfcmVjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5fbmV4dFJlY29ubmVjdERlbGF5ID4gMCkge1xuICAgICAgICAgICAgdGhpcy5kZWJ1ZyhgU1RPTVA6IHNjaGVkdWxpbmcgcmVjb25uZWN0aW9uIGluICR7dGhpcy5fbmV4dFJlY29ubmVjdERlbGF5fW1zYCk7XG4gICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3RvciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlY29ubmVjdFRpbWVNb2RlID09PSBSZWNvbm5lY3Rpb25UaW1lTW9kZS5FWFBPTkVOVElBTCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9uZXh0UmVjb25uZWN0RGVsYXkgPSB0aGlzLl9uZXh0UmVjb25uZWN0RGVsYXkgKiAyO1xuICAgICAgICAgICAgICAgICAgICAvLyBUcnVuY2F0ZWQgZXhwb25lbnRpYWwgYmFja29mZiB3aXRoIGEgc2V0IGxpbWl0IHVubGVzcyBkaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXhSZWNvbm5lY3REZWxheSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmV4dFJlY29ubmVjdERlbGF5ID0gTWF0aC5taW4odGhpcy5fbmV4dFJlY29ubmVjdERlbGF5LCB0aGlzLm1heFJlY29ubmVjdERlbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9jb25uZWN0KCk7XG4gICAgICAgICAgICB9LCB0aGlzLl9uZXh0UmVjb25uZWN0RGVsYXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERpc2Nvbm5lY3RzIHRoZSBjbGllbnQgYW5kIHN0b3BzIHRoZSBhdXRvbWF0aWMgcmVjb25uZWN0aW9uIGxvb3AuXG4gICAgICpcbiAgICAgKiBJZiB0aGVyZSBpcyBhbiBhY3RpdmUgU1RPTVAgY29ubmVjdGlvbiBhdCB0aGUgdGltZSBvZiBpbnZvY2F0aW9uLCB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG4gICAgICogd2lsbCBiZSB0cmlnZ2VyZWQgZHVyaW5nIHRoZSBzaHV0ZG93biBzZXF1ZW5jZS4gT25jZSBkZWFjdGl2YXRlZCwgdGhlIGNsaWVudCB3aWxsIGVudGVyIHRoZVxuICAgICAqIGBJTkFDVElWRWAgc3RhdGUsIGFuZCBubyBmdXJ0aGVyIHJlY29ubmVjdGlvbiBhdHRlbXB0cyB3aWxsIGJlIG1hZGUuXG4gICAgICpcbiAgICAgKiAqKkJlaGF2aW9yKio6XG4gICAgICogLSBJZiB0aGVyZSBpcyBubyBhY3RpdmUgV2ViU29ja2V0IGNvbm5lY3Rpb24sIHRoaXMgbWV0aG9kIHJlc29sdmVzIGltbWVkaWF0ZWx5LlxuICAgICAqIC0gSWYgdGhlcmUgaXMgYW4gYWN0aXZlIGNvbm5lY3Rpb24sIHRoZSBtZXRob2Qgd2FpdHMgZm9yIHRoZSB1bmRlcmx5aW5nIFdlYlNvY2tldFxuICAgICAqICAgdG8gcHJvcGVybHkgY2xvc2UgYmVmb3JlIHJlc29sdmluZy5cbiAgICAgKiAtIE11bHRpcGxlIGNhbGxzIHRvIHRoaXMgbWV0aG9kIGFyZSBzYWZlLiBFYWNoIGludm9jYXRpb24gcmVzb2x2ZXMgdXBvbiBjb21wbGV0aW9uLlxuICAgICAqIC0gVG8gcmVhY3RpdmF0ZSwgY2FsbCBbQ2xpZW50I2FjdGl2YXRlXXtAbGluayBDbGllbnQjYWN0aXZhdGV9LlxuICAgICAqXG4gICAgICogKipFeHBlcmltZW50YWwgT3B0aW9uOioqXG4gICAgICogLSBCeSBzcGVjaWZ5aW5nIHRoZSBgZm9yY2U6IHRydWVgIG9wdGlvbiwgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uIGlzIGRpc2NhcmRlZCBpbW1lZGlhdGVseSxcbiAgICAgKiAgIGJ5cGFzc2luZyBib3RoIHRoZSBTVE9NUCBhbmQgV2ViU29ja2V0IHNodXRkb3duIHNlcXVlbmNlcy5cbiAgICAgKiAtICoqQ2F1dGlvbjoqKiBVc2luZyBgZm9yY2U6IHRydWVgIG1heSBsZWF2ZSB0aGUgV2ViU29ja2V0IGluIGFuIGluY29uc2lzdGVudCBzdGF0ZSxcbiAgICAgKiAgIGFuZCBicm9rZXJzIG1heSBub3QgaW1tZWRpYXRlbHkgZGV0ZWN0IHRoZSB0ZXJtaW5hdGlvbi5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogYGBgamF2YXNjcmlwdFxuICAgICAqIC8vIEdyYWNlZnVsIGRpc2Nvbm5lY3RcbiAgICAgKiBhd2FpdCBjbGllbnQuZGVhY3RpdmF0ZSgpO1xuICAgICAqXG4gICAgICogLy8gRm9yY2VkIGRpc2Nvbm5lY3QgdG8gc3BlZWQgdXAgc2h1dGRvd24gd2hlbiB0aGUgY29ubmVjdGlvbiBpcyBzdGFsZVxuICAgICAqIGF3YWl0IGNsaWVudC5kZWFjdGl2YXRlKHsgZm9yY2U6IHRydWUgfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIGRlYWN0aXZhdGlvbi4gVXNlIGBmb3JjZTogdHJ1ZWAgZm9yIGltbWVkaWF0ZSBzaHV0ZG93bi5cbiAgICAgKiBAcmV0dXJucyBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBkZWFjdGl2YXRpb24gcHJvY2VzcyBjb21wbGV0ZXMuXG4gICAgICovXG4gICAgYXN5bmMgZGVhY3RpdmF0ZShvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgZm9yY2UgPSBvcHRpb25zLmZvcmNlIHx8IGZhbHNlO1xuICAgICAgICBjb25zdCBuZWVkVG9EaXNwb3NlID0gdGhpcy5hY3RpdmU7XG4gICAgICAgIGxldCByZXRQcm9taXNlO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gQWN0aXZhdGlvblN0YXRlLklOQUNUSVZFKSB7XG4gICAgICAgICAgICB0aGlzLmRlYnVnKGBBbHJlYWR5IElOQUNUSVZFLCBub3RoaW5nIG1vcmUgdG8gZG9gKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jaGFuZ2VTdGF0ZShBY3RpdmF0aW9uU3RhdGUuREVBQ1RJVkFUSU5HKTtcbiAgICAgICAgLy8gUmVzZXQgcmVjb25uZWN0aW9uIHRpbWVyIGp1c3QgdG8gYmUgc2FmZVxuICAgICAgICB0aGlzLl9uZXh0UmVjb25uZWN0RGVsYXkgPSAwO1xuICAgICAgICAvLyBDbGVhciBpZiBhIHJlY29ubmVjdGlvbiB3YXMgc2NoZWR1bGVkXG4gICAgICAgIGlmICh0aGlzLl9yZWNvbm5lY3Rvcikge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3JlY29ubmVjdG9yKTtcbiAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zdG9tcEhhbmRsZXIgJiZcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgLSBpZiB0aGVyZSBpcyBhIF9zdG9tcEhhbmRsZXIsIHRoZXJlIGlzIHRoZSB3ZWJTb2NrZXRcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0LnJlYWR5U3RhdGUgIT09IFN0b21wU29ja2V0U3RhdGUuQ0xPU0VEKSB7XG4gICAgICAgICAgICBjb25zdCBvcmlnT25XZWJTb2NrZXRDbG9zZSA9IHRoaXMuX3N0b21wSGFuZGxlci5vbldlYlNvY2tldENsb3NlO1xuICAgICAgICAgICAgLy8gd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgdW5kZXJseWluZyB3ZWJzb2NrZXQgdG8gY2xvc2VcbiAgICAgICAgICAgIHJldFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSAtIHRoZXJlIGlzIGEgX3N0b21wSGFuZGxlclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0b21wSGFuZGxlci5vbldlYlNvY2tldENsb3NlID0gZXZ0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ09uV2ViU29ja2V0Q2xvc2UoZXZ0KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGluZGljYXRlIHRoYXQgYXV0byByZWNvbm5lY3QgbG9vcCBzaG91bGQgdGVybWluYXRlXG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2VTdGF0ZShBY3RpdmF0aW9uU3RhdGUuSU5BQ1RJVkUpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JjZSkge1xuICAgICAgICAgICAgdGhpcy5fc3RvbXBIYW5kbGVyPy5kaXNjYXJkV2Vic29ja2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmVlZFRvRGlzcG9zZSkge1xuICAgICAgICAgICAgdGhpcy5fZGlzcG9zZVN0b21wSGFuZGxlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXRQcm9taXNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3JjZXMgYSBkaXNjb25uZWN0IGJ5IGRpcmVjdGx5IGNsb3NpbmcgdGhlIFdlYlNvY2tldC5cbiAgICAgKlxuICAgICAqIFVubGlrZSBhIG5vcm1hbCBkaXNjb25uZWN0LCB0aGlzIGRvZXMgbm90IHNlbmQgYSBESVNDT05ORUNUIHNlcXVlbmNlIHRvIHRoZSBicm9rZXIgYnV0XG4gICAgICogaW5zdGVhZCBjbG9zZXMgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uIGRpcmVjdGx5LiBBZnRlciBmb3JjaW5nIGEgZGlzY29ubmVjdCwgdGhlIGNsaWVudFxuICAgICAqIHdpbGwgYXV0b21hdGljYWxseSBhdHRlbXB0IHRvIHJlY29ubmVjdCBiYXNlZCBvbiBpdHMgYHJlY29ubmVjdERlbGF5YCBjb25maWd1cmF0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIHByZXZlbnQgZnVydGhlciByZWNvbm5lY3QgYXR0ZW1wdHMsIGNhbGwgW0NsaWVudCNkZWFjdGl2YXRlXXtAbGluayBDbGllbnQjZGVhY3RpdmF0ZX0uXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiBjbGllbnQuZm9yY2VEaXNjb25uZWN0KCk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZm9yY2VEaXNjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5fc3RvbXBIYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9zdG9tcEhhbmRsZXIuZm9yY2VEaXNjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2Rpc3Bvc2VTdG9tcEhhbmRsZXIoKSB7XG4gICAgICAgIC8vIERpc3Bvc2UgU1RPTVAgSGFuZGxlclxuICAgICAgICBpZiAodGhpcy5fc3RvbXBIYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9zdG9tcEhhbmRsZXIuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgbWVzc2FnZSB0byB0aGUgc3BlY2lmaWVkIGRlc3RpbmF0aW9uIG9uIHRoZSBTVE9NUCBicm9rZXIuXG4gICAgICpcbiAgICAgKiBUaGUgYGJvZHlgIG11c3QgYmUgYSBgc3RyaW5nYC4gRm9yIG5vbi1zdHJpbmcgcGF5bG9hZHMgKGUuZy4sIEpTT04pLCBlbmNvZGUgaXQgYXMgYSBzdHJpbmcgYmVmb3JlIHNlbmRpbmcuXG4gICAgICogSWYgc2VuZGluZyBiaW5hcnkgZGF0YSwgdXNlIHRoZSBgYmluYXJ5Qm9keWAgcGFyYW1ldGVyIGFzIGEgW1VpbnQ4QXJyYXldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1VpbnQ4QXJyYXkpLlxuICAgICAqXG4gICAgICogKipDb250ZW50LUxlbmd0aCBCZWhhdmlvcioqOlxuICAgICAqIC0gRm9yIG5vbi1iaW5hcnkgbWVzc2FnZXMsIHRoZSBgY29udGVudC1sZW5ndGhgIGhlYWRlciBpcyBhZGRlZCBieSBkZWZhdWx0LlxuICAgICAqIC0gVGhlIGBjb250ZW50LWxlbmd0aGAgaGVhZGVyIGNhbiBiZSBza2lwcGVkIGZvciB0ZXh0IGZyYW1lcyBieSBzZXR0aW5nIGBza2lwQ29udGVudExlbmd0aEhlYWRlcjogdHJ1ZWAgaW4gdGhlIHBhcmFtZXRlcnMuXG4gICAgICogLSBGb3IgYmluYXJ5IG1lc3NhZ2VzLCB0aGUgYGNvbnRlbnQtbGVuZ3RoYCBoZWFkZXIgaXMgYWx3YXlzIGluY2x1ZGVkLlxuICAgICAqXG4gICAgICogKipOb3RlcyoqOlxuICAgICAqIC0gRW5zdXJlIHRoYXQgYnJva2VycyBzdXBwb3J0IGJpbmFyeSBmcmFtZXMgYmVmb3JlIHVzaW5nIGBiaW5hcnlCb2R5YC5cbiAgICAgKiAtIFNlbmRpbmcgbWVzc2FnZXMgd2l0aCBOVUxMIG9jdGV0cyBhbmQgbWlzc2luZyBgY29udGVudC1sZW5ndGhgIGhlYWRlcnMgY2FuIGNhdXNlIGJyb2tlcnMgdG8gZGlzY29ubmVjdCBhbmQgdGhyb3cgZXJyb3JzLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogLy8gQmFzaWMgdGV4dCBtZXNzYWdlXG4gICAgICogY2xpZW50LnB1Ymxpc2goeyBkZXN0aW5hdGlvbjogXCIvcXVldWUvdGVzdFwiLCBib2R5OiBcIkhlbGxvLCBTVE9NUFwiIH0pO1xuICAgICAqXG4gICAgICogLy8gVGV4dCBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBoZWFkZXJzXG4gICAgICogY2xpZW50LnB1Ymxpc2goeyBkZXN0aW5hdGlvbjogXCIvcXVldWUvdGVzdFwiLCBoZWFkZXJzOiB7IHByaW9yaXR5OiA5IH0sIGJvZHk6IFwiSGVsbG8sIFNUT01QXCIgfSk7XG4gICAgICpcbiAgICAgKiAvLyBTa2lwIGNvbnRlbnQtbGVuZ3RoIGhlYWRlclxuICAgICAqIGNsaWVudC5wdWJsaXNoKHsgZGVzdGluYXRpb246IFwiL3F1ZXVlL3Rlc3RcIiwgYm9keTogXCJIZWxsbywgU1RPTVBcIiwgc2tpcENvbnRlbnRMZW5ndGhIZWFkZXI6IHRydWUgfSk7XG4gICAgICpcbiAgICAgKiAvLyBCaW5hcnkgbWVzc2FnZVxuICAgICAqIGNvbnN0IGJpbmFyeURhdGEgPSBuZXcgVWludDhBcnJheShbMSwgMiwgMywgNF0pO1xuICAgICAqIGNsaWVudC5wdWJsaXNoKHtcbiAgICAgKiAgIGRlc3RpbmF0aW9uOiAnL3RvcGljL3NwZWNpYWwnLFxuICAgICAqICAgYmluYXJ5Qm9keTogYmluYXJ5RGF0YSxcbiAgICAgKiAgIGhlYWRlcnM6IHsgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIH1cbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaXNoKHBhcmFtcykge1xuICAgICAgICB0aGlzLl9jaGVja0Nvbm5lY3Rpb24oKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZSAtIHdlIGFscmVhZHkgY2hlY2tlZCB0aGF0IHRoZXJlIGlzIGEgX3N0b21wSGFuZGxlciwgYW5kIGl0IGlzIGNvbm5lY3RlZFxuICAgICAgICB0aGlzLl9zdG9tcEhhbmRsZXIucHVibGlzaChwYXJhbXMpO1xuICAgIH1cbiAgICBfY2hlY2tDb25uZWN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGVyZSBpcyBubyB1bmRlcmx5aW5nIFNUT01QIGNvbm5lY3Rpb24nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb25pdG9ycyBmb3IgYSByZWNlaXB0IGFja25vd2xlZGdtZW50IGZyb20gdGhlIGJyb2tlciBmb3Igc3BlY2lmaWMgb3BlcmF0aW9ucy5cbiAgICAgKlxuICAgICAqIEFkZCBhIGByZWNlaXB0YCBoZWFkZXIgdG8gdGhlIG9wZXJhdGlvbiAobGlrZSBzdWJzY3JpYmUgb3IgcHVibGlzaCksIGFuZCB1c2UgdGhpcyBtZXRob2Qgd2l0aFxuICAgICAqIHRoZSBzYW1lIHJlY2VpcHQgSUQgdG8gZGV0ZWN0IHdoZW4gdGhlIGJyb2tlciBoYXMgYWNrbm93bGVkZ2VkIHRoZSBvcGVyYXRpb24ncyBjb21wbGV0aW9uLlxuICAgICAqXG4gICAgICogVGhlIGNhbGxiYWNrIGlzIGludm9rZWQgd2l0aCB0aGUgY29ycmVzcG9uZGluZyB7QGxpbmsgSUZyYW1lfSB3aGVuIHRoZSByZWNlaXB0IGlzIHJlY2VpdmVkLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogY29uc3QgcmVjZWlwdElkID0gXCJ1bmlxdWUtcmVjZWlwdC1pZFwiO1xuICAgICAqXG4gICAgICogY2xpZW50LndhdGNoRm9yUmVjZWlwdChyZWNlaXB0SWQsIChmcmFtZSkgPT4ge1xuICAgICAqICAgY29uc29sZS5sb2coXCJPcGVyYXRpb24gYWNrbm93bGVkZ2VkIGJ5IHRoZSBicm9rZXI6XCIsIGZyYW1lKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vIEF0dGFjaCB0aGUgcmVjZWlwdCBoZWFkZXIgdG8gYW4gb3BlcmF0aW9uXG4gICAgICogY2xpZW50LnB1Ymxpc2goeyBkZXN0aW5hdGlvbjogXCIvcXVldWUvdGVzdFwiLCBoZWFkZXJzOiB7IHJlY2VpcHQ6IHJlY2VpcHRJZCB9LCBib2R5OiBcIkhlbGxvXCIgfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVjZWlwdElkIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgcmVjZWlwdC5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gaW52b2tlZCBvbiByZWNlaXZpbmcgdGhlIFJFQ0VJUFQgZnJhbWUuXG4gICAgICovXG4gICAgd2F0Y2hGb3JSZWNlaXB0KHJlY2VpcHRJZCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fY2hlY2tDb25uZWN0aW9uKCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgLSB3ZSBhbHJlYWR5IGNoZWNrZWQgdGhhdCB0aGVyZSBpcyBhIF9zdG9tcEhhbmRsZXIsIGFuZCBpdCBpcyBjb25uZWN0ZWRcbiAgICAgICAgdGhpcy5fc3RvbXBIYW5kbGVyLndhdGNoRm9yUmVjZWlwdChyZWNlaXB0SWQsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0byBhIGRlc3RpbmF0aW9uIG9uIHRoZSBTVE9NUCBicm9rZXIuXG4gICAgICpcbiAgICAgKiBUaGUgY2FsbGJhY2sgaXMgdHJpZ2dlcmVkIGZvciBlYWNoIG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSB0aGUgc3Vic2NyaWJlZCBkZXN0aW5hdGlvbi4gVGhlIG1lc3NhZ2VcbiAgICAgKiBpcyBwYXNzZWQgYXMgYW4ge0BsaW5rIElNZXNzYWdlfSBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqICoqU3Vic2NyaXB0aW9uIElEKio6XG4gICAgICogLSBJZiBubyBgaWRgIGlzIHByb3ZpZGVkIGluIGBoZWFkZXJzYCwgdGhlIGxpYnJhcnkgZ2VuZXJhdGVzIGEgdW5pcXVlIHN1YnNjcmlwdGlvbiBJRCBhdXRvbWF0aWNhbGx5LlxuICAgICAqIC0gUHJvdmlkZSBhbiBleHBsaWNpdCBgaWRgIGluIGBoZWFkZXJzYCBpZiB5b3Ugd2lzaCB0byBtYW5hZ2UgdGhlIHN1YnNjcmlwdGlvbiBJRCBtYW51YWxseS5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogYGBgamF2YXNjcmlwdFxuICAgICAqIGNvbnN0IGNhbGxiYWNrID0gKG1lc3NhZ2UpID0+IHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKFwiUmVjZWl2ZWQgbWVzc2FnZTpcIiwgbWVzc2FnZS5ib2R5KTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogLy8gQXV0by1nZW5lcmF0ZWQgc3Vic2NyaXB0aW9uIElEXG4gICAgICogY29uc3Qgc3Vic2NyaXB0aW9uID0gY2xpZW50LnN1YnNjcmliZShcIi9xdWV1ZS90ZXN0XCIsIGNhbGxiYWNrKTtcbiAgICAgKlxuICAgICAqIC8vIEV4cGxpY2l0IHN1YnNjcmlwdGlvbiBJRFxuICAgICAqIGNvbnN0IG15U3ViSWQgPSBcIm15LXN1YnNjcmlwdGlvbi1pZFwiO1xuICAgICAqIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGNsaWVudC5zdWJzY3JpYmUoXCIvcXVldWUvdGVzdFwiLCBjYWxsYmFjaywgeyBpZDogbXlTdWJJZCB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZXN0aW5hdGlvbiBEZXN0aW5hdGlvbiB0byBzdWJzY3JpYmUgdG8uXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIEZ1bmN0aW9uIGludm9rZWQgZm9yIGVhY2ggcmVjZWl2ZWQgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0gaGVhZGVycyBPcHRpb25hbCBoZWFkZXJzIGZvciBzdWJzY3JpcHRpb24sIHN1Y2ggYXMgYGlkYC5cbiAgICAgKiBAcmV0dXJucyBBIHtAbGluayBTdG9tcFN1YnNjcmlwdGlvbn0gd2hpY2ggY2FuIGJlIHVzZWQgdG8gbWFuYWdlIHRoZSBzdWJzY3JpcHRpb24uXG4gICAgICovXG4gICAgc3Vic2NyaWJlKGRlc3RpbmF0aW9uLCBjYWxsYmFjaywgaGVhZGVycyA9IHt9KSB7XG4gICAgICAgIHRoaXMuX2NoZWNrQ29ubmVjdGlvbigpO1xuICAgICAgICAvLyBAdHMtaWdub3JlIC0gd2UgYWxyZWFkeSBjaGVja2VkIHRoYXQgdGhlcmUgaXMgYSBfc3RvbXBIYW5kbGVyLCBhbmQgaXQgaXMgY29ubmVjdGVkXG4gICAgICAgIHJldHVybiB0aGlzLl9zdG9tcEhhbmRsZXIuc3Vic2NyaWJlKGRlc3RpbmF0aW9uLCBjYWxsYmFjaywgaGVhZGVycyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVuc3Vic2NyaWJlcyBmcm9tIGEgc3Vic2NyaXB0aW9uIG9uIHRoZSBTVE9NUCBicm9rZXIuXG4gICAgICpcbiAgICAgKiBQcmVmZXIgdXNpbmcgdGhlIGB1bnN1YnNjcmliZWAgbWV0aG9kIGRpcmVjdGx5IG9uIHRoZSB7QGxpbmsgU3RvbXBTdWJzY3JpcHRpb259IHJldHVybmVkIGZyb20gYHN1YnNjcmliZWAgZm9yIGNsZWFuZXIgbWFuYWdlbWVudDpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogY29uc3Qgc3Vic2NyaXB0aW9uID0gY2xpZW50LnN1YnNjcmliZShcIi9xdWV1ZS90ZXN0XCIsIGNhbGxiYWNrKTtcbiAgICAgKiAvLyBVbnN1YnNjcmliZSB1c2luZyB0aGUgc3Vic2NyaXB0aW9uIG9iamVjdFxuICAgICAqIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgY2FuIGFsc28gYmUgdXNlZCBkaXJlY3RseSB3aXRoIHRoZSBzdWJzY3JpcHRpb24gSUQuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiBjbGllbnQudW5zdWJzY3JpYmUoXCJteS1zdWJzY3JpcHRpb24taWRcIik7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgU3Vic2NyaXB0aW9uIElEIHRvIHVuc3Vic2NyaWJlLlxuICAgICAqIEBwYXJhbSBoZWFkZXJzIE9wdGlvbmFsIGhlYWRlcnMgdG8gcGFzcyBmb3IgdGhlIFVOU1VCU0NSSUJFIGZyYW1lLlxuICAgICAqL1xuICAgIHVuc3Vic2NyaWJlKGlkLCBoZWFkZXJzID0ge30pIHtcbiAgICAgICAgdGhpcy5fY2hlY2tDb25uZWN0aW9uKCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgLSB3ZSBhbHJlYWR5IGNoZWNrZWQgdGhhdCB0aGVyZSBpcyBhIF9zdG9tcEhhbmRsZXIsIGFuZCBpdCBpcyBjb25uZWN0ZWRcbiAgICAgICAgdGhpcy5fc3RvbXBIYW5kbGVyLnVuc3Vic2NyaWJlKGlkLCBoZWFkZXJzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnRzIGEgbmV3IHRyYW5zYWN0aW9uLiBUaGUgcmV0dXJuZWQge0BsaW5rIElUcmFuc2FjdGlvbn0gb2JqZWN0IHByb3ZpZGVzXG4gICAgICogbWV0aG9kcyBmb3IgW2NvbW1pdF17QGxpbmsgSVRyYW5zYWN0aW9uI2NvbW1pdH0gYW5kIFthYm9ydF17QGxpbmsgSVRyYW5zYWN0aW9uI2Fib3J0fS5cbiAgICAgKlxuICAgICAqIElmIGB0cmFuc2FjdGlvbklkYCBpcyBub3QgcHJvdmlkZWQsIHRoZSBsaWJyYXJ5IGdlbmVyYXRlcyBhIHVuaXF1ZSBJRCBpbnRlcm5hbGx5LlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogY29uc3QgdHggPSBjbGllbnQuYmVnaW4oKTsgLy8gQXV0by1nZW5lcmF0ZWQgSURcbiAgICAgKlxuICAgICAqIC8vIE9yIGV4cGxpY2l0bHkgc3BlY2lmeSBhIHRyYW5zYWN0aW9uIElEXG4gICAgICogY29uc3QgdHggPSBjbGllbnQuYmVnaW4oXCJteS10cmFuc2FjdGlvbi1pZFwiKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIE9wdGlvbmFsIHRyYW5zYWN0aW9uIElELlxuICAgICAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIHtAbGluayBJVHJhbnNhY3Rpb259LlxuICAgICAqL1xuICAgIGJlZ2luKHRyYW5zYWN0aW9uSWQpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tDb25uZWN0aW9uKCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgLSB3ZSBhbHJlYWR5IGNoZWNrZWQgdGhhdCB0aGVyZSBpcyBhIF9zdG9tcEhhbmRsZXIsIGFuZCBpdCBpcyBjb25uZWN0ZWRcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0b21wSGFuZGxlci5iZWdpbih0cmFuc2FjdGlvbklkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tbWl0cyBhIHRyYW5zYWN0aW9uLlxuICAgICAqXG4gICAgICogSXQgaXMgc3Ryb25nbHkgcmVjb21tZW5kZWQgdG8gY2FsbCBbY29tbWl0XXtAbGluayBJVHJhbnNhY3Rpb24jY29tbWl0fSBvblxuICAgICAqIHRoZSB0cmFuc2FjdGlvbiBvYmplY3QgcmV0dXJuZWQgYnkgW2NsaWVudCNiZWdpbl17QGxpbmsgQ2xpZW50I2JlZ2lufS5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogYGBgamF2YXNjcmlwdFxuICAgICAqIGNvbnN0IHR4ID0gY2xpZW50LmJlZ2luKCk7XG4gICAgICogLy8gUGVyZm9ybSBvcGVyYXRpb25zIHVuZGVyIHRoaXMgdHJhbnNhY3Rpb25cbiAgICAgKiB0eC5jb21taXQoKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFuc2FjdGlvbklkIFRoZSBJRCBvZiB0aGUgdHJhbnNhY3Rpb24gdG8gY29tbWl0LlxuICAgICAqL1xuICAgIGNvbW1pdCh0cmFuc2FjdGlvbklkKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrQ29ubmVjdGlvbigpO1xuICAgICAgICAvLyBAdHMtaWdub3JlIC0gd2UgYWxyZWFkeSBjaGVja2VkIHRoYXQgdGhlcmUgaXMgYSBfc3RvbXBIYW5kbGVyLCBhbmQgaXQgaXMgY29ubmVjdGVkXG4gICAgICAgIHRoaXMuX3N0b21wSGFuZGxlci5jb21taXQodHJhbnNhY3Rpb25JZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFib3J0cyBhIHRyYW5zYWN0aW9uLlxuICAgICAqXG4gICAgICogSXQgaXMgc3Ryb25nbHkgcmVjb21tZW5kZWQgdG8gY2FsbCBbYWJvcnRde0BsaW5rIElUcmFuc2FjdGlvbiNhYm9ydH0gZGlyZWN0bHlcbiAgICAgKiBvbiB0aGUgdHJhbnNhY3Rpb24gb2JqZWN0IHJldHVybmVkIGJ5IFtjbGllbnQjYmVnaW5de0BsaW5rIENsaWVudCNiZWdpbn0uXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiBjb25zdCB0eCA9IGNsaWVudC5iZWdpbigpO1xuICAgICAqIC8vIFBlcmZvcm0gb3BlcmF0aW9ucyB1bmRlciB0aGlzIHRyYW5zYWN0aW9uXG4gICAgICogdHguYWJvcnQoKTsgLy8gQWJvcnQgdGhlIHRyYW5zYWN0aW9uXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhbnNhY3Rpb25JZCBUaGUgSUQgb2YgdGhlIHRyYW5zYWN0aW9uIHRvIGFib3J0LlxuICAgICAqL1xuICAgIGFib3J0KHRyYW5zYWN0aW9uSWQpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tDb25uZWN0aW9uKCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgLSB3ZSBhbHJlYWR5IGNoZWNrZWQgdGhhdCB0aGVyZSBpcyBhIF9zdG9tcEhhbmRsZXIsIGFuZCBpdCBpcyBjb25uZWN0ZWRcbiAgICAgICAgdGhpcy5fc3RvbXBIYW5kbGVyLmFib3J0KHRyYW5zYWN0aW9uSWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBY2tub3dsZWRnZXMgcmVjZWlwdCBvZiBhIG1lc3NhZ2UuIFR5cGljYWxseSwgdGhpcyBzaG91bGQgYmUgZG9uZSBieSBjYWxsaW5nXG4gICAgICogW2Fja117QGxpbmsgSU1lc3NhZ2UjYWNrfSBkaXJlY3RseSBvbiB0aGUge0BsaW5rIElNZXNzYWdlfSBpbnN0YW5jZSBwYXNzZWRcbiAgICAgKiB0byB0aGUgc3Vic2NyaXB0aW9uIGNhbGxiYWNrLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogY29uc3QgY2FsbGJhY2sgPSAobWVzc2FnZSkgPT4ge1xuICAgICAqICAgLy8gUHJvY2VzcyB0aGUgbWVzc2FnZVxuICAgICAqICAgbWVzc2FnZS5hY2soKTsgLy8gQWNrbm93bGVkZ2UgdGhlIG1lc3NhZ2VcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogY2xpZW50LnN1YnNjcmliZShcIi9xdWV1ZS9leGFtcGxlXCIsIGNhbGxiYWNrLCB7IGFjazogXCJjbGllbnRcIiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNzYWdlSWQgVGhlIElEIG9mIHRoZSBtZXNzYWdlIHRvIGFja25vd2xlZGdlLlxuICAgICAqIEBwYXJhbSBzdWJzY3JpcHRpb25JZCBUaGUgSUQgb2YgdGhlIHN1YnNjcmlwdGlvbi5cbiAgICAgKiBAcGFyYW0gaGVhZGVycyBPcHRpb25hbCBoZWFkZXJzIGZvciB0aGUgYWNrbm93bGVkZ21lbnQgZnJhbWUuXG4gICAgICovXG4gICAgYWNrKG1lc3NhZ2VJZCwgc3Vic2NyaXB0aW9uSWQsIGhlYWRlcnMgPSB7fSkge1xuICAgICAgICB0aGlzLl9jaGVja0Nvbm5lY3Rpb24oKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZSAtIHdlIGFscmVhZHkgY2hlY2tlZCB0aGF0IHRoZXJlIGlzIGEgX3N0b21wSGFuZGxlciwgYW5kIGl0IGlzIGNvbm5lY3RlZFxuICAgICAgICB0aGlzLl9zdG9tcEhhbmRsZXIuYWNrKG1lc3NhZ2VJZCwgc3Vic2NyaXB0aW9uSWQsIGhlYWRlcnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWplY3RzIGEgbWVzc2FnZSAobmVnYXRpdmUgYWNrbm93bGVkZ21lbnQpLiBMaWtlIGFja25vd2xlZGdtZW50cywgdGhpcyBzaG91bGRcbiAgICAgKiB0eXBpY2FsbHkgYmUgZG9uZSBieSBjYWxsaW5nIFtuYWNrXXtAbGluayBJTWVzc2FnZSNuYWNrfSBkaXJlY3RseSBvbiB0aGUge0BsaW5rIElNZXNzYWdlfVxuICAgICAqIGluc3RhbmNlIHBhc3NlZCB0byB0aGUgc3Vic2NyaXB0aW9uIGNhbGxiYWNrLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogY29uc3QgY2FsbGJhY2sgPSAobWVzc2FnZSkgPT4ge1xuICAgICAqICAgLy8gUHJvY2VzcyB0aGUgbWVzc2FnZVxuICAgICAqICAgaWYgKGlzRXJyb3IobWVzc2FnZSkpIHtcbiAgICAgKiAgICAgbWVzc2FnZS5uYWNrKCk7IC8vIFJlamVjdCB0aGUgbWVzc2FnZVxuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBjbGllbnQuc3Vic2NyaWJlKFwiL3F1ZXVlL2V4YW1wbGVcIiwgY2FsbGJhY2ssIHsgYWNrOiBcImNsaWVudFwiIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc3NhZ2VJZCBUaGUgSUQgb2YgdGhlIG1lc3NhZ2UgdG8gbmVnYXRpdmVseSBhY2tub3dsZWRnZS5cbiAgICAgKiBAcGFyYW0gc3Vic2NyaXB0aW9uSWQgVGhlIElEIG9mIHRoZSBzdWJzY3JpcHRpb24uXG4gICAgICogQHBhcmFtIGhlYWRlcnMgT3B0aW9uYWwgaGVhZGVycyBmb3IgdGhlIE5BQ0sgZnJhbWUuXG4gICAgICovXG4gICAgbmFjayhtZXNzYWdlSWQsIHN1YnNjcmlwdGlvbklkLCBoZWFkZXJzID0ge30pIHtcbiAgICAgICAgdGhpcy5fY2hlY2tDb25uZWN0aW9uKCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgLSB3ZSBhbHJlYWR5IGNoZWNrZWQgdGhhdCB0aGVyZSBpcyBhIF9zdG9tcEhhbmRsZXIsIGFuZCBpdCBpcyBjb25uZWN0ZWRcbiAgICAgICAgdGhpcy5fc3RvbXBIYW5kbGVyLm5hY2sobWVzc2FnZUlkLCBzdWJzY3JpcHRpb25JZCwgaGVhZGVycyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/frame-impl.js":
/*!********************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/frame-impl.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FrameImpl: () => (/* binding */ FrameImpl)\n/* harmony export */ });\n/* harmony import */ var _byte_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/byte.js\");\n\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nclass FrameImpl {\n    /**\n     * body of the frame\n     */\n    get body() {\n        if (!this._body && this.isBinaryBody) {\n            this._body = new TextDecoder().decode(this._binaryBody);\n        }\n        return this._body || '';\n    }\n    /**\n     * body as Uint8Array\n     */\n    get binaryBody() {\n        if (!this._binaryBody && !this.isBinaryBody) {\n            this._binaryBody = new TextEncoder().encode(this._body);\n        }\n        // At this stage it will definitely have a valid value\n        return this._binaryBody;\n    }\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    constructor(params) {\n        const { command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader, } = params;\n        this.command = command;\n        this.headers = Object.assign({}, headers || {});\n        if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n        }\n        else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n        }\n        this.escapeHeaderValues = escapeHeaderValues || false;\n        this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    static fromRawFrame(rawFrame, escapeHeaderValues) {\n        const headers = {};\n        const trim = (str) => str.replace(/^\\s+|\\s+$/g, '');\n        // In case of repeated headers, as per standards, first value need to be used\n        for (const header of rawFrame.headers.reverse()) {\n            const idx = header.indexOf(':');\n            const key = trim(header[0]);\n            let value = trim(header[1]);\n            if (escapeHeaderValues &&\n                rawFrame.command !== 'CONNECT' &&\n                rawFrame.command !== 'CONNECTED') {\n                value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n        }\n        return new FrameImpl({\n            command: rawFrame.command,\n            headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues,\n        });\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    serialize() {\n        const cmdAndHeaders = this.serializeCmdAndHeaders();\n        if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n        }\n        else {\n            return cmdAndHeaders + this._body + _byte_js__WEBPACK_IMPORTED_MODULE_0__.BYTE.NULL;\n        }\n    }\n    serializeCmdAndHeaders() {\n        const lines = [this.command];\n        if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n        }\n        for (const name of Object.keys(this.headers || {})) {\n            const value = this.headers[name];\n            if (this.escapeHeaderValues &&\n                this.command !== 'CONNECT' &&\n                this.command !== 'CONNECTED') {\n                lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n            }\n            else {\n                lines.push(`${name}:${value}`);\n            }\n        }\n        if (this.isBinaryBody ||\n            (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n            lines.push(`content-length:${this.bodyLength()}`);\n        }\n        return lines.join(_byte_js__WEBPACK_IMPORTED_MODULE_0__.BYTE.LF) + _byte_js__WEBPACK_IMPORTED_MODULE_0__.BYTE.LF + _byte_js__WEBPACK_IMPORTED_MODULE_0__.BYTE.LF;\n    }\n    isBodyEmpty() {\n        return this.bodyLength() === 0;\n    }\n    bodyLength() {\n        const binaryBody = this.binaryBody;\n        return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    static sizeOfUTF8(s) {\n        return s ? new TextEncoder().encode(s).length : 0;\n    }\n    static toUnit8Array(cmdAndHeaders, binaryBody) {\n        const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n        const nullTerminator = new Uint8Array([0]);\n        const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n        uint8Frame.set(uint8CmdAndHeaders);\n        uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n        uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n        return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    static marshall(params) {\n        const frame = new FrameImpl(params);\n        return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n    static hdrValueEscape(str) {\n        return str\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n    static hdrValueUnEscape(str) {\n        return str\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\n/g, '\\n')\n            .replace(/\\\\c/g, ':')\n            .replace(/\\\\\\\\/g, '\\\\');\n    }\n}\n//# sourceMappingURL=frame-impl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/frame-impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/parser.js":
/*!****************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/parser.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser)\n/* harmony export */ });\n/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\nconst LF = 10;\n/**\n * @internal\n */\nconst CR = 13;\n/**\n * @internal\n */\nconst COLON = 58;\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nclass Parser {\n    constructor(onFrame, onIncomingPing) {\n        this.onFrame = onFrame;\n        this.onIncomingPing = onIncomingPing;\n        this._encoder = new TextEncoder();\n        this._decoder = new TextDecoder();\n        this._token = [];\n        this._initState();\n    }\n    parseChunk(segment, appendMissingNULLonIncoming = false) {\n        let chunk;\n        if (typeof segment === 'string') {\n            chunk = this._encoder.encode(segment);\n        }\n        else {\n            chunk = new Uint8Array(segment);\n        }\n        // See https://github.com/stomp-js/stompjs/issues/89\n        // Remove when underlying issue is fixed.\n        //\n        // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n        if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n            const chunkWithNull = new Uint8Array(chunk.length + 1);\n            chunkWithNull.set(chunk, 0);\n            chunkWithNull[chunk.length] = 0;\n            chunk = chunkWithNull;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < chunk.length; i++) {\n            const byte = chunk[i];\n            this._onByte(byte);\n        }\n    }\n    // The following implements a simple Rec Descent Parser.\n    // The grammar is simple and just one byte tells what should be the next state\n    _collectFrame(byte) {\n        if (byte === NULL) {\n            // Ignore\n            return;\n        }\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            // Incoming Ping\n            this.onIncomingPing();\n            return;\n        }\n        this._onByte = this._collectCommand;\n        this._reinjectByte(byte);\n    }\n    _collectCommand(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.command = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaders(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._setupCollectBody();\n            return;\n        }\n        this._onByte = this._collectHeaderKey;\n        this._reinjectByte(byte);\n    }\n    _reinjectByte(byte) {\n        this._onByte(byte);\n    }\n    _collectHeaderKey(byte) {\n        if (byte === COLON) {\n            this._headerKey = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaderValue;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaderValue(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.headers.push([\n                this._headerKey,\n                this._consumeTokenAsUTF8(),\n            ]);\n            this._headerKey = undefined;\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _setupCollectBody() {\n        const contentLengthHeader = this._results.headers.filter((header) => {\n            return header[0] === 'content-length';\n        })[0];\n        if (contentLengthHeader) {\n            this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n            this._onByte = this._collectBodyFixedSize;\n        }\n        else {\n            this._onByte = this._collectBodyNullTerminated;\n        }\n    }\n    _collectBodyNullTerminated(byte) {\n        if (byte === NULL) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectBodyFixedSize(byte) {\n        // It is post decrement, so that we discard the trailing NULL octet\n        if (this._bodyBytesRemaining-- === 0) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _retrievedBody() {\n        this._results.binaryBody = this._consumeTokenAsRaw();\n        try {\n            this.onFrame(this._results);\n        }\n        catch (e) {\n            console.log(`Ignoring an exception thrown by a frame handler. Original exception: `, e);\n        }\n        this._initState();\n    }\n    // Rec Descent Parser helpers\n    _consumeByte(byte) {\n        this._token.push(byte);\n    }\n    _consumeTokenAsUTF8() {\n        return this._decoder.decode(this._consumeTokenAsRaw());\n    }\n    _consumeTokenAsRaw() {\n        const rawResult = new Uint8Array(this._token);\n        this._token = [];\n        return rawResult;\n    }\n    _initState() {\n        this._results = {\n            command: undefined,\n            headers: [],\n            binaryBody: undefined,\n        };\n        this._token = [];\n        this._headerKey = undefined;\n        this._onByte = this._collectFrame;\n    }\n}\n//# sourceMappingURL=parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/stomp-handler.js":
/*!***********************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/stomp-handler.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StompHandler: () => (/* binding */ StompHandler)\n/* harmony export */ });\n/* harmony import */ var _augment_websocket_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./augment-websocket.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/augment-websocket.js\");\n/* harmony import */ var _byte_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./byte.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/byte.js\");\n/* harmony import */ var _frame_impl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./frame-impl.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/frame-impl.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/parser.js\");\n/* harmony import */ var _ticker_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ticker.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/ticker.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/types.js\");\n/* harmony import */ var _versions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./versions.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/versions.js\");\n\n\n\n\n\n\n\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nclass StompHandler {\n    get connectedVersion() {\n        return this._connectedVersion;\n    }\n    get connected() {\n        return this._connected;\n    }\n    constructor(_client, _webSocket, config) {\n        this._client = _client;\n        this._webSocket = _webSocket;\n        this._connected = false;\n        this._serverFrameHandlers = {\n            // [CONNECTED Frame](https://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            CONNECTED: frame => {\n                this.debug(`connected to server ${frame.headers.server}`);\n                this._connected = true;\n                this._connectedVersion = frame.headers.version;\n                // STOMP version 1.2 needs header values to be escaped\n                if (this._connectedVersion === _versions_js__WEBPACK_IMPORTED_MODULE_0__.Versions.V1_2) {\n                    this._escapeHeaderValues = true;\n                }\n                this._setupHeartbeat(frame.headers);\n                this.onConnect(frame);\n            },\n            // [MESSAGE Frame](https://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            MESSAGE: frame => {\n                // the callback is registered when the client calls\n                // `subscribe()`.\n                // If there is no registered subscription for the received message,\n                // the default `onUnhandledMessage` callback is used that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](https://www.rabbitmq.com/stomp.html)).\n                const subscription = frame.headers.subscription;\n                const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n                // bless the frame to be a Message\n                const message = frame;\n                const client = this;\n                const messageId = this._connectedVersion === _versions_js__WEBPACK_IMPORTED_MODULE_0__.Versions.V1_2\n                    ? message.headers.ack\n                    : message.headers['message-id'];\n                // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n                message.ack = (headers = {}) => {\n                    return client.ack(messageId, subscription, headers);\n                };\n                message.nack = (headers = {}) => {\n                    return client.nack(messageId, subscription, headers);\n                };\n                onReceive(message);\n            },\n            // [RECEIPT Frame](https://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            RECEIPT: frame => {\n                const callback = this._receiptWatchers[frame.headers['receipt-id']];\n                if (callback) {\n                    callback(frame);\n                    // Server will acknowledge only once, remove the callback\n                    delete this._receiptWatchers[frame.headers['receipt-id']];\n                }\n                else {\n                    this.onUnhandledReceipt(frame);\n                }\n            },\n            // [ERROR Frame](https://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            ERROR: frame => {\n                this.onStompError(frame);\n            },\n        };\n        // used to index subscribers\n        this._counter = 0;\n        // subscription callbacks indexed by subscriber's ID\n        this._subscriptions = {};\n        // receipt-watchers indexed by receipts-ids\n        this._receiptWatchers = {};\n        this._partialData = '';\n        this._escapeHeaderValues = false;\n        this._lastServerActivityTS = Date.now();\n        this.debug = config.debug;\n        this.stompVersions = config.stompVersions;\n        this.connectHeaders = config.connectHeaders;\n        this.disconnectHeaders = config.disconnectHeaders;\n        this.heartbeatIncoming = config.heartbeatIncoming;\n        this.heartbeatToleranceMultiplier = config.heartbeatGracePeriods;\n        this.heartbeatOutgoing = config.heartbeatOutgoing;\n        this.splitLargeFrames = config.splitLargeFrames;\n        this.maxWebSocketChunkSize = config.maxWebSocketChunkSize;\n        this.forceBinaryWSFrames = config.forceBinaryWSFrames;\n        this.logRawCommunication = config.logRawCommunication;\n        this.appendMissingNULLonIncoming = config.appendMissingNULLonIncoming;\n        this.discardWebsocketOnCommFailure = config.discardWebsocketOnCommFailure;\n        this.onConnect = config.onConnect;\n        this.onDisconnect = config.onDisconnect;\n        this.onStompError = config.onStompError;\n        this.onWebSocketClose = config.onWebSocketClose;\n        this.onWebSocketError = config.onWebSocketError;\n        this.onUnhandledMessage = config.onUnhandledMessage;\n        this.onUnhandledReceipt = config.onUnhandledReceipt;\n        this.onUnhandledFrame = config.onUnhandledFrame;\n        this.onHeartbeatReceived = config.onHeartbeatReceived;\n        this.onHeartbeatLost = config.onHeartbeatLost;\n    }\n    start() {\n        const parser = new _parser_js__WEBPACK_IMPORTED_MODULE_1__.Parser(\n        // On Frame\n        rawFrame => {\n            const frame = _frame_impl_js__WEBPACK_IMPORTED_MODULE_2__.FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n            // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n            if (!this.logRawCommunication) {\n                this.debug(`<<< ${frame}`);\n            }\n            const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n            serverFrameHandler(frame);\n        }, \n        // On Incoming Ping\n        () => {\n            this.debug('<<< PONG');\n            this.onHeartbeatReceived();\n        });\n        this._webSocket.onmessage = (evt) => {\n            this.debug('Received data');\n            this._lastServerActivityTS = Date.now();\n            if (this.logRawCommunication) {\n                const rawChunkAsString = evt.data instanceof ArrayBuffer\n                    ? new TextDecoder().decode(evt.data)\n                    : evt.data;\n                this.debug(`<<< ${rawChunkAsString}`);\n            }\n            parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n        };\n        this._webSocket.onclose = (closeEvent) => {\n            this.debug(`Connection closed to ${this._webSocket.url}`);\n            this._cleanUp();\n            this.onWebSocketClose(closeEvent);\n        };\n        this._webSocket.onerror = (errorEvent) => {\n            this.onWebSocketError(errorEvent);\n        };\n        this._webSocket.onopen = () => {\n            // Clone before updating\n            const connectHeaders = Object.assign({}, this.connectHeaders);\n            this.debug('Web Socket Opened...');\n            connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n            connectHeaders['heart-beat'] = [\n                this.heartbeatOutgoing,\n                this.heartbeatIncoming,\n            ].join(',');\n            this._transmit({ command: 'CONNECT', headers: connectHeaders });\n        };\n    }\n    _setupHeartbeat(headers) {\n        if (headers.version !== _versions_js__WEBPACK_IMPORTED_MODULE_0__.Versions.V1_1 &&\n            headers.version !== _versions_js__WEBPACK_IMPORTED_MODULE_0__.Versions.V1_2) {\n            return;\n        }\n        // It is valid for the server to not send this header\n        // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n        if (!headers['heart-beat']) {\n            return;\n        }\n        // heart-beat header received from the server looks like:\n        //\n        //     heart-beat: sx, sy\n        const [serverOutgoing, serverIncoming] = headers['heart-beat']\n            .split(',')\n            .map((v) => parseInt(v, 10));\n        if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n            const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n            this.debug(`send PING every ${ttl}ms`);\n            this._pinger = new _ticker_js__WEBPACK_IMPORTED_MODULE_3__.Ticker(ttl, this._client.heartbeatStrategy, this.debug);\n            this._pinger.start(() => {\n                if (this._webSocket.readyState === _types_js__WEBPACK_IMPORTED_MODULE_4__.StompSocketState.OPEN) {\n                    this._webSocket.send(_byte_js__WEBPACK_IMPORTED_MODULE_5__.BYTE.LF);\n                    this.debug('>>> PING');\n                }\n            });\n        }\n        if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n            const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n            this.debug(`check PONG every ${ttl}ms`);\n            this._ponger = setInterval(() => {\n                const delta = Date.now() - this._lastServerActivityTS;\n                // We wait multiple grace periods to be flexible on window's setInterval calls\n                if (delta > ttl * this.heartbeatToleranceMultiplier) {\n                    this.debug(`did not receive server activity for the last ${delta}ms`);\n                    this.onHeartbeatLost();\n                    this._closeOrDiscardWebsocket();\n                }\n            }, ttl);\n        }\n    }\n    _closeOrDiscardWebsocket() {\n        if (this.discardWebsocketOnCommFailure) {\n            this.debug('Discarding websocket, the underlying socket may linger for a while');\n            this.discardWebsocket();\n        }\n        else {\n            this.debug('Issuing close on the websocket');\n            this._closeWebsocket();\n        }\n    }\n    forceDisconnect() {\n        if (this._webSocket) {\n            if (this._webSocket.readyState === _types_js__WEBPACK_IMPORTED_MODULE_4__.StompSocketState.CONNECTING ||\n                this._webSocket.readyState === _types_js__WEBPACK_IMPORTED_MODULE_4__.StompSocketState.OPEN) {\n                this._closeOrDiscardWebsocket();\n            }\n        }\n    }\n    _closeWebsocket() {\n        this._webSocket.onmessage = () => { }; // ignore messages\n        this._webSocket.close();\n    }\n    discardWebsocket() {\n        if (typeof this._webSocket.terminate !== 'function') {\n            (0,_augment_websocket_js__WEBPACK_IMPORTED_MODULE_6__.augmentWebsocket)(this._webSocket, (msg) => this.debug(msg));\n        }\n        // @ts-ignore - this method will be there at this stage\n        this._webSocket.terminate();\n    }\n    _transmit(params) {\n        const { command, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const frame = new _frame_impl_js__WEBPACK_IMPORTED_MODULE_2__.FrameImpl({\n            command,\n            headers,\n            body,\n            binaryBody,\n            escapeHeaderValues: this._escapeHeaderValues,\n            skipContentLengthHeader,\n        });\n        let rawChunk = frame.serialize();\n        if (this.logRawCommunication) {\n            this.debug(`>>> ${rawChunk}`);\n        }\n        else {\n            this.debug(`>>> ${frame}`);\n        }\n        if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n            rawChunk = new TextEncoder().encode(rawChunk);\n        }\n        if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n            this._webSocket.send(rawChunk);\n        }\n        else {\n            let out = rawChunk;\n            while (out.length > 0) {\n                const chunk = out.substring(0, this.maxWebSocketChunkSize);\n                out = out.substring(this.maxWebSocketChunkSize);\n                this._webSocket.send(chunk);\n                this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n            }\n        }\n    }\n    dispose() {\n        if (this.connected) {\n            try {\n                // clone before updating\n                const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n                if (!disconnectHeaders.receipt) {\n                    disconnectHeaders.receipt = `close-${this._counter++}`;\n                }\n                this.watchForReceipt(disconnectHeaders.receipt, frame => {\n                    this._closeWebsocket();\n                    this._cleanUp();\n                    this.onDisconnect(frame);\n                });\n                this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n            }\n            catch (error) {\n                this.debug(`Ignoring error during disconnect ${error}`);\n            }\n        }\n        else {\n            if (this._webSocket.readyState === _types_js__WEBPACK_IMPORTED_MODULE_4__.StompSocketState.CONNECTING ||\n                this._webSocket.readyState === _types_js__WEBPACK_IMPORTED_MODULE_4__.StompSocketState.OPEN) {\n                this._closeWebsocket();\n            }\n        }\n    }\n    _cleanUp() {\n        this._connected = false;\n        if (this._pinger) {\n            this._pinger.stop();\n            this._pinger = undefined;\n        }\n        if (this._ponger) {\n            clearInterval(this._ponger);\n            this._ponger = undefined;\n        }\n    }\n    publish(params) {\n        const { destination, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const hdrs = Object.assign({ destination }, headers);\n        this._transmit({\n            command: 'SEND',\n            headers: hdrs,\n            body,\n            binaryBody,\n            skipContentLengthHeader,\n        });\n    }\n    watchForReceipt(receiptId, callback) {\n        this._receiptWatchers[receiptId] = callback;\n    }\n    subscribe(destination, callback, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (!headers.id) {\n            headers.id = `sub-${this._counter++}`;\n        }\n        headers.destination = destination;\n        this._subscriptions[headers.id] = callback;\n        this._transmit({ command: 'SUBSCRIBE', headers });\n        const client = this;\n        return {\n            id: headers.id,\n            unsubscribe(hdrs) {\n                return client.unsubscribe(headers.id, hdrs);\n            },\n        };\n    }\n    unsubscribe(id, headers = {}) {\n        headers = Object.assign({}, headers);\n        delete this._subscriptions[id];\n        headers.id = id;\n        this._transmit({ command: 'UNSUBSCRIBE', headers });\n    }\n    begin(transactionId) {\n        const txId = transactionId || `tx-${this._counter++}`;\n        this._transmit({\n            command: 'BEGIN',\n            headers: {\n                transaction: txId,\n            },\n        });\n        const client = this;\n        return {\n            id: txId,\n            commit() {\n                client.commit(txId);\n            },\n            abort() {\n                client.abort(txId);\n            },\n        };\n    }\n    commit(transactionId) {\n        this._transmit({\n            command: 'COMMIT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    abort(transactionId) {\n        this._transmit({\n            command: 'ABORT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    ack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === _versions_js__WEBPACK_IMPORTED_MODULE_0__.Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        this._transmit({ command: 'ACK', headers });\n    }\n    nack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === _versions_js__WEBPACK_IMPORTED_MODULE_0__.Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        return this._transmit({ command: 'NACK', headers });\n    }\n}\n//# sourceMappingURL=stomp-handler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/stomp-handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/ticker.js":
/*!****************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/ticker.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ticker: () => (/* binding */ Ticker)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/types.js\");\n\nclass Ticker {\n    constructor(_interval, _strategy = _types_js__WEBPACK_IMPORTED_MODULE_0__.TickerStrategy.Interval, _debug) {\n        this._interval = _interval;\n        this._strategy = _strategy;\n        this._debug = _debug;\n        this._workerScript = `\n    var startTime = Date.now();\n    setInterval(function() {\n        self.postMessage(Date.now() - startTime);\n    }, ${this._interval});\n  `;\n    }\n    start(tick) {\n        this.stop();\n        if (this.shouldUseWorker()) {\n            this.runWorker(tick);\n        }\n        else {\n            this.runInterval(tick);\n        }\n    }\n    stop() {\n        this.disposeWorker();\n        this.disposeInterval();\n    }\n    shouldUseWorker() {\n        return (typeof Worker !== 'undefined' && this._strategy === _types_js__WEBPACK_IMPORTED_MODULE_0__.TickerStrategy.Worker);\n    }\n    runWorker(tick) {\n        this._debug('Using runWorker for outgoing pings');\n        if (!this._worker) {\n            this._worker = new Worker(URL.createObjectURL(new Blob([this._workerScript], { type: 'text/javascript' })));\n            this._worker.onmessage = message => tick(message.data);\n        }\n    }\n    runInterval(tick) {\n        this._debug('Using runInterval for outgoing pings');\n        if (!this._timer) {\n            const startTime = Date.now();\n            this._timer = setInterval(() => {\n                tick(Date.now() - startTime);\n            }, this._interval);\n        }\n    }\n    disposeWorker() {\n        if (this._worker) {\n            this._worker.terminate();\n            delete this._worker;\n            this._debug('Outgoing ping disposeWorker');\n        }\n    }\n    disposeInterval() {\n        if (this._timer) {\n            clearInterval(this._timer);\n            delete this._timer;\n            this._debug('Outgoing ping disposeInterval');\n        }\n    }\n}\n//# sourceMappingURL=ticker.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0b21wL3N0b21wanMvZXNtNi90aWNrZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEM7QUFDckM7QUFDUCx1Q0FBdUMscURBQWM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLElBQUksZUFBZTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxxREFBYztBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJGQUEyRix5QkFBeUI7QUFDcEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2xpZmVkaXZlcmdlbmNlMS9EZXNrdG9wL2ZsaWNoYXQtd2ViL25vZGVfbW9kdWxlcy9Ac3RvbXAvc3RvbXBqcy9lc202L3RpY2tlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaWNrZXJTdHJhdGVneSB9IGZyb20gJy4vdHlwZXMuanMnO1xuZXhwb3J0IGNsYXNzIFRpY2tlciB7XG4gICAgY29uc3RydWN0b3IoX2ludGVydmFsLCBfc3RyYXRlZ3kgPSBUaWNrZXJTdHJhdGVneS5JbnRlcnZhbCwgX2RlYnVnKSB7XG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gX2ludGVydmFsO1xuICAgICAgICB0aGlzLl9zdHJhdGVneSA9IF9zdHJhdGVneTtcbiAgICAgICAgdGhpcy5fZGVidWcgPSBfZGVidWc7XG4gICAgICAgIHRoaXMuX3dvcmtlclNjcmlwdCA9IGBcbiAgICB2YXIgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5wb3N0TWVzc2FnZShEYXRlLm5vdygpIC0gc3RhcnRUaW1lKTtcbiAgICB9LCAke3RoaXMuX2ludGVydmFsfSk7XG4gIGA7XG4gICAgfVxuICAgIHN0YXJ0KHRpY2spIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZFVzZVdvcmtlcigpKSB7XG4gICAgICAgICAgICB0aGlzLnJ1bldvcmtlcih0aWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucnVuSW50ZXJ2YWwodGljayk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgdGhpcy5kaXNwb3NlV29ya2VyKCk7XG4gICAgICAgIHRoaXMuZGlzcG9zZUludGVydmFsKCk7XG4gICAgfVxuICAgIHNob3VsZFVzZVdvcmtlcigpIHtcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLl9zdHJhdGVneSA9PT0gVGlja2VyU3RyYXRlZ3kuV29ya2VyKTtcbiAgICB9XG4gICAgcnVuV29ya2VyKHRpY2spIHtcbiAgICAgICAgdGhpcy5fZGVidWcoJ1VzaW5nIHJ1bldvcmtlciBmb3Igb3V0Z29pbmcgcGluZ3MnKTtcbiAgICAgICAgaWYgKCF0aGlzLl93b3JrZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3dvcmtlciA9IG5ldyBXb3JrZXIoVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbdGhpcy5fd29ya2VyU2NyaXB0XSwgeyB0eXBlOiAndGV4dC9qYXZhc2NyaXB0JyB9KSkpO1xuICAgICAgICAgICAgdGhpcy5fd29ya2VyLm9ubWVzc2FnZSA9IG1lc3NhZ2UgPT4gdGljayhtZXNzYWdlLmRhdGEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJ1bkludGVydmFsKHRpY2spIHtcbiAgICAgICAgdGhpcy5fZGVidWcoJ1VzaW5nIHJ1bkludGVydmFsIGZvciBvdXRnb2luZyBwaW5ncycpO1xuICAgICAgICBpZiAoIXRoaXMuX3RpbWVyKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGljayhEYXRlLm5vdygpIC0gc3RhcnRUaW1lKTtcbiAgICAgICAgICAgIH0sIHRoaXMuX2ludGVydmFsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNwb3NlV29ya2VyKCkge1xuICAgICAgICBpZiAodGhpcy5fd29ya2VyKSB7XG4gICAgICAgICAgICB0aGlzLl93b3JrZXIudGVybWluYXRlKCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fd29ya2VyO1xuICAgICAgICAgICAgdGhpcy5fZGVidWcoJ091dGdvaW5nIHBpbmcgZGlzcG9zZVdvcmtlcicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpc3Bvc2VJbnRlcnZhbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVyKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX3RpbWVyKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl90aW1lcjtcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKCdPdXRnb2luZyBwaW5nIGRpc3Bvc2VJbnRlcnZhbCcpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGlja2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/ticker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/types.js":
/*!***************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/types.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActivationState: () => (/* binding */ ActivationState),\n/* harmony export */   ReconnectionTimeMode: () => (/* binding */ ReconnectionTimeMode),\n/* harmony export */   StompSocketState: () => (/* binding */ StompSocketState),\n/* harmony export */   TickerStrategy: () => (/* binding */ TickerStrategy)\n/* harmony export */ });\n/**\n * Possible states for the IStompSocket\n */\nvar StompSocketState;\n(function (StompSocketState) {\n    StompSocketState[StompSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    StompSocketState[StompSocketState[\"OPEN\"] = 1] = \"OPEN\";\n    StompSocketState[StompSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n    StompSocketState[StompSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(StompSocketState || (StompSocketState = {}));\n/**\n * Possible activation state\n */\nvar ActivationState;\n(function (ActivationState) {\n    ActivationState[ActivationState[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    ActivationState[ActivationState[\"DEACTIVATING\"] = 1] = \"DEACTIVATING\";\n    ActivationState[ActivationState[\"INACTIVE\"] = 2] = \"INACTIVE\";\n})(ActivationState || (ActivationState = {}));\n/**\n * Possible reconnection wait time modes\n */\nvar ReconnectionTimeMode;\n(function (ReconnectionTimeMode) {\n    ReconnectionTimeMode[ReconnectionTimeMode[\"LINEAR\"] = 0] = \"LINEAR\";\n    ReconnectionTimeMode[ReconnectionTimeMode[\"EXPONENTIAL\"] = 1] = \"EXPONENTIAL\";\n})(ReconnectionTimeMode || (ReconnectionTimeMode = {}));\n/**\n * Possible ticker strategies for outgoing heartbeat ping\n */\nvar TickerStrategy;\n(function (TickerStrategy) {\n    TickerStrategy[\"Interval\"] = \"interval\";\n    TickerStrategy[\"Worker\"] = \"worker\";\n})(TickerStrategy || (TickerStrategy = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0b21wL3N0b21wanMvZXNtNi90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0Q0FBNEM7QUFDN0M7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMENBQTBDO0FBQzNDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0Q7QUFDckQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QztBQUN6QyIsInNvdXJjZXMiOlsiL1VzZXJzL2xpZmVkaXZlcmdlbmNlMS9EZXNrdG9wL2ZsaWNoYXQtd2ViL25vZGVfbW9kdWxlcy9Ac3RvbXAvc3RvbXBqcy9lc202L3R5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUG9zc2libGUgc3RhdGVzIGZvciB0aGUgSVN0b21wU29ja2V0XG4gKi9cbmV4cG9ydCB2YXIgU3RvbXBTb2NrZXRTdGF0ZTtcbihmdW5jdGlvbiAoU3RvbXBTb2NrZXRTdGF0ZSkge1xuICAgIFN0b21wU29ja2V0U3RhdGVbU3RvbXBTb2NrZXRTdGF0ZVtcIkNPTk5FQ1RJTkdcIl0gPSAwXSA9IFwiQ09OTkVDVElOR1wiO1xuICAgIFN0b21wU29ja2V0U3RhdGVbU3RvbXBTb2NrZXRTdGF0ZVtcIk9QRU5cIl0gPSAxXSA9IFwiT1BFTlwiO1xuICAgIFN0b21wU29ja2V0U3RhdGVbU3RvbXBTb2NrZXRTdGF0ZVtcIkNMT1NJTkdcIl0gPSAyXSA9IFwiQ0xPU0lOR1wiO1xuICAgIFN0b21wU29ja2V0U3RhdGVbU3RvbXBTb2NrZXRTdGF0ZVtcIkNMT1NFRFwiXSA9IDNdID0gXCJDTE9TRURcIjtcbn0pKFN0b21wU29ja2V0U3RhdGUgfHwgKFN0b21wU29ja2V0U3RhdGUgPSB7fSkpO1xuLyoqXG4gKiBQb3NzaWJsZSBhY3RpdmF0aW9uIHN0YXRlXG4gKi9cbmV4cG9ydCB2YXIgQWN0aXZhdGlvblN0YXRlO1xuKGZ1bmN0aW9uIChBY3RpdmF0aW9uU3RhdGUpIHtcbiAgICBBY3RpdmF0aW9uU3RhdGVbQWN0aXZhdGlvblN0YXRlW1wiQUNUSVZFXCJdID0gMF0gPSBcIkFDVElWRVwiO1xuICAgIEFjdGl2YXRpb25TdGF0ZVtBY3RpdmF0aW9uU3RhdGVbXCJERUFDVElWQVRJTkdcIl0gPSAxXSA9IFwiREVBQ1RJVkFUSU5HXCI7XG4gICAgQWN0aXZhdGlvblN0YXRlW0FjdGl2YXRpb25TdGF0ZVtcIklOQUNUSVZFXCJdID0gMl0gPSBcIklOQUNUSVZFXCI7XG59KShBY3RpdmF0aW9uU3RhdGUgfHwgKEFjdGl2YXRpb25TdGF0ZSA9IHt9KSk7XG4vKipcbiAqIFBvc3NpYmxlIHJlY29ubmVjdGlvbiB3YWl0IHRpbWUgbW9kZXNcbiAqL1xuZXhwb3J0IHZhciBSZWNvbm5lY3Rpb25UaW1lTW9kZTtcbihmdW5jdGlvbiAoUmVjb25uZWN0aW9uVGltZU1vZGUpIHtcbiAgICBSZWNvbm5lY3Rpb25UaW1lTW9kZVtSZWNvbm5lY3Rpb25UaW1lTW9kZVtcIkxJTkVBUlwiXSA9IDBdID0gXCJMSU5FQVJcIjtcbiAgICBSZWNvbm5lY3Rpb25UaW1lTW9kZVtSZWNvbm5lY3Rpb25UaW1lTW9kZVtcIkVYUE9ORU5USUFMXCJdID0gMV0gPSBcIkVYUE9ORU5USUFMXCI7XG59KShSZWNvbm5lY3Rpb25UaW1lTW9kZSB8fCAoUmVjb25uZWN0aW9uVGltZU1vZGUgPSB7fSkpO1xuLyoqXG4gKiBQb3NzaWJsZSB0aWNrZXIgc3RyYXRlZ2llcyBmb3Igb3V0Z29pbmcgaGVhcnRiZWF0IHBpbmdcbiAqL1xuZXhwb3J0IHZhciBUaWNrZXJTdHJhdGVneTtcbihmdW5jdGlvbiAoVGlja2VyU3RyYXRlZ3kpIHtcbiAgICBUaWNrZXJTdHJhdGVneVtcIkludGVydmFsXCJdID0gXCJpbnRlcnZhbFwiO1xuICAgIFRpY2tlclN0cmF0ZWd5W1wiV29ya2VyXCJdID0gXCJ3b3JrZXJcIjtcbn0pKFRpY2tlclN0cmF0ZWd5IHx8IChUaWNrZXJTdHJhdGVneSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/versions.js":
/*!******************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/versions.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Versions: () => (/* binding */ Versions)\n/* harmony export */ });\n/**\n * Supported STOMP versions\n *\n * Part of `@stomp/stompjs`.\n */\nclass Versions {\n    /**\n     * Takes an array of versions, typical elements '1.2', '1.1', or '1.0'\n     *\n     * You will be creating an instance of this class if you want to override\n     * supported versions to be declared during STOMP handshake.\n     */\n    constructor(versions) {\n        this.versions = versions;\n    }\n    /**\n     * Used as part of CONNECT STOMP Frame\n     */\n    supportedVersions() {\n        return this.versions.join(',');\n    }\n    /**\n     * Used while creating a WebSocket\n     */\n    protocolVersions() {\n        return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n    }\n}\n/**\n * Indicates protocol version 1.0\n */\nVersions.V1_0 = '1.0';\n/**\n * Indicates protocol version 1.1\n */\nVersions.V1_1 = '1.1';\n/**\n * Indicates protocol version 1.2\n */\nVersions.V1_2 = '1.2';\n/**\n * @internal\n */\nVersions.default = new Versions([\n    Versions.V1_2,\n    Versions.V1_1,\n    Versions.V1_0,\n]);\n//# sourceMappingURL=versions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0b21wL3N0b21wanMvZXNtNi92ZXJzaW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsbUJBQW1CO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saWZlZGl2ZXJnZW5jZTEvRGVza3RvcC9mbGljaGF0LXdlYi9ub2RlX21vZHVsZXMvQHN0b21wL3N0b21wanMvZXNtNi92ZXJzaW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN1cHBvcnRlZCBTVE9NUCB2ZXJzaW9uc1xuICpcbiAqIFBhcnQgb2YgYEBzdG9tcC9zdG9tcGpzYC5cbiAqL1xuZXhwb3J0IGNsYXNzIFZlcnNpb25zIHtcbiAgICAvKipcbiAgICAgKiBUYWtlcyBhbiBhcnJheSBvZiB2ZXJzaW9ucywgdHlwaWNhbCBlbGVtZW50cyAnMS4yJywgJzEuMScsIG9yICcxLjAnXG4gICAgICpcbiAgICAgKiBZb3Ugd2lsbCBiZSBjcmVhdGluZyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGlmIHlvdSB3YW50IHRvIG92ZXJyaWRlXG4gICAgICogc3VwcG9ydGVkIHZlcnNpb25zIHRvIGJlIGRlY2xhcmVkIGR1cmluZyBTVE9NUCBoYW5kc2hha2UuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodmVyc2lvbnMpIHtcbiAgICAgICAgdGhpcy52ZXJzaW9ucyA9IHZlcnNpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVc2VkIGFzIHBhcnQgb2YgQ09OTkVDVCBTVE9NUCBGcmFtZVxuICAgICAqL1xuICAgIHN1cHBvcnRlZFZlcnNpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJzaW9ucy5qb2luKCcsJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVzZWQgd2hpbGUgY3JlYXRpbmcgYSBXZWJTb2NrZXRcbiAgICAgKi9cbiAgICBwcm90b2NvbFZlcnNpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJzaW9ucy5tYXAoeCA9PiBgdiR7eC5yZXBsYWNlKCcuJywgJycpfS5zdG9tcGApO1xuICAgIH1cbn1cbi8qKlxuICogSW5kaWNhdGVzIHByb3RvY29sIHZlcnNpb24gMS4wXG4gKi9cblZlcnNpb25zLlYxXzAgPSAnMS4wJztcbi8qKlxuICogSW5kaWNhdGVzIHByb3RvY29sIHZlcnNpb24gMS4xXG4gKi9cblZlcnNpb25zLlYxXzEgPSAnMS4xJztcbi8qKlxuICogSW5kaWNhdGVzIHByb3RvY29sIHZlcnNpb24gMS4yXG4gKi9cblZlcnNpb25zLlYxXzIgPSAnMS4yJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cblZlcnNpb25zLmRlZmF1bHQgPSBuZXcgVmVyc2lvbnMoW1xuICAgIFZlcnNpb25zLlYxXzIsXG4gICAgVmVyc2lvbnMuVjFfMSxcbiAgICBWZXJzaW9ucy5WMV8wLFxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/versions.js\n");

/***/ })

};
;