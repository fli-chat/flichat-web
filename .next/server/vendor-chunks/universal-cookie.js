"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/universal-cookie";
exports.ids = ["vendor-chunks/universal-cookie"];
exports.modules = {

/***/ "(ssr)/./node_modules/universal-cookie/esm/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/universal-cookie/esm/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Cookies)\n/* harmony export */ });\nvar dist = {};\n\nvar hasRequiredDist;\n\nfunction requireDist () {\n\tif (hasRequiredDist) return dist;\n\thasRequiredDist = 1;\n\tObject.defineProperty(dist, \"__esModule\", { value: true });\n\tdist.parse = parse;\n\tdist.serialize = serialize;\n\t/**\n\t * RegExp to match cookie-name in RFC 6265 sec 4.1.1\n\t * This refers out to the obsoleted definition of token in RFC 2616 sec 2.2\n\t * which has been replaced by the token definition in RFC 7230 appendix B.\n\t *\n\t * cookie-name       = token\n\t * token             = 1*tchar\n\t * tchar             = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" /\n\t *                     \"*\" / \"+\" / \"-\" / \".\" / \"^\" / \"_\" /\n\t *                     \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n\t *\n\t * Note: Allowing more characters - https://github.com/jshttp/cookie/issues/191\n\t * Allow same range as cookie value, except `=`, which delimits end of name.\n\t */\n\tconst cookieNameRegExp = /^[\\u0021-\\u003A\\u003C\\u003E-\\u007E]+$/;\n\t/**\n\t * RegExp to match cookie-value in RFC 6265 sec 4.1.1\n\t *\n\t * cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n\t * cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n\t *                     ; US-ASCII characters excluding CTLs,\n\t *                     ; whitespace DQUOTE, comma, semicolon,\n\t *                     ; and backslash\n\t *\n\t * Allowing more characters: https://github.com/jshttp/cookie/issues/191\n\t * Comma, backslash, and DQUOTE are not part of the parsing algorithm.\n\t */\n\tconst cookieValueRegExp = /^[\\u0021-\\u003A\\u003C-\\u007E]*$/;\n\t/**\n\t * RegExp to match domain-value in RFC 6265 sec 4.1.1\n\t *\n\t * domain-value      = <subdomain>\n\t *                     ; defined in [RFC1034], Section 3.5, as\n\t *                     ; enhanced by [RFC1123], Section 2.1\n\t * <subdomain>       = <label> | <subdomain> \".\" <label>\n\t * <label>           = <let-dig> [ [ <ldh-str> ] <let-dig> ]\n\t *                     Labels must be 63 characters or less.\n\t *                     'let-dig' not 'letter' in the first char, per RFC1123\n\t * <ldh-str>         = <let-dig-hyp> | <let-dig-hyp> <ldh-str>\n\t * <let-dig-hyp>     = <let-dig> | \"-\"\n\t * <let-dig>         = <letter> | <digit>\n\t * <letter>          = any one of the 52 alphabetic characters A through Z in\n\t *                     upper case and a through z in lower case\n\t * <digit>           = any one of the ten digits 0 through 9\n\t *\n\t * Keep support for leading dot: https://github.com/jshttp/cookie/issues/173\n\t *\n\t * > (Note that a leading %x2E (\".\"), if present, is ignored even though that\n\t * character is not permitted, but a trailing %x2E (\".\"), if present, will\n\t * cause the user agent to ignore the attribute.)\n\t */\n\tconst domainValueRegExp = /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;\n\t/**\n\t * RegExp to match path-value in RFC 6265 sec 4.1.1\n\t *\n\t * path-value        = <any CHAR except CTLs or \";\">\n\t * CHAR              = %x01-7F\n\t *                     ; defined in RFC 5234 appendix B.1\n\t */\n\tconst pathValueRegExp = /^[\\u0020-\\u003A\\u003D-\\u007E]*$/;\n\tconst __toString = Object.prototype.toString;\n\tconst NullObject = /* @__PURE__ */ (() => {\n\t    const C = function () { };\n\t    C.prototype = Object.create(null);\n\t    return C;\n\t})();\n\t/**\n\t * Parse a cookie header.\n\t *\n\t * Parse the given cookie header string into an object\n\t * The object has the various cookies as keys(names) => values\n\t */\n\tfunction parse(str, options) {\n\t    const obj = new NullObject();\n\t    const len = str.length;\n\t    // RFC 6265 sec 4.1.1, RFC 2616 2.2 defines a cookie name consists of one char minimum, plus '='.\n\t    if (len < 2)\n\t        return obj;\n\t    const dec = options?.decode || decode;\n\t    let index = 0;\n\t    do {\n\t        const eqIdx = str.indexOf(\"=\", index);\n\t        if (eqIdx === -1)\n\t            break; // No more cookie pairs.\n\t        const colonIdx = str.indexOf(\";\", index);\n\t        const endIdx = colonIdx === -1 ? len : colonIdx;\n\t        if (eqIdx > endIdx) {\n\t            // backtrack on prior semicolon\n\t            index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n\t            continue;\n\t        }\n\t        const keyStartIdx = startIndex(str, index, eqIdx);\n\t        const keyEndIdx = endIndex(str, eqIdx, keyStartIdx);\n\t        const key = str.slice(keyStartIdx, keyEndIdx);\n\t        // only assign once\n\t        if (obj[key] === undefined) {\n\t            let valStartIdx = startIndex(str, eqIdx + 1, endIdx);\n\t            let valEndIdx = endIndex(str, endIdx, valStartIdx);\n\t            const value = dec(str.slice(valStartIdx, valEndIdx));\n\t            obj[key] = value;\n\t        }\n\t        index = endIdx + 1;\n\t    } while (index < len);\n\t    return obj;\n\t}\n\tfunction startIndex(str, index, max) {\n\t    do {\n\t        const code = str.charCodeAt(index);\n\t        if (code !== 0x20 /*   */ && code !== 0x09 /* \\t */)\n\t            return index;\n\t    } while (++index < max);\n\t    return max;\n\t}\n\tfunction endIndex(str, index, min) {\n\t    while (index > min) {\n\t        const code = str.charCodeAt(--index);\n\t        if (code !== 0x20 /*   */ && code !== 0x09 /* \\t */)\n\t            return index + 1;\n\t    }\n\t    return min;\n\t}\n\t/**\n\t * Serialize data into a cookie header.\n\t *\n\t * Serialize a name value pair into a cookie string suitable for\n\t * http headers. An optional options object specifies cookie parameters.\n\t *\n\t * serialize('foo', 'bar', { httpOnly: true })\n\t *   => \"foo=bar; httpOnly\"\n\t */\n\tfunction serialize(name, val, options) {\n\t    const enc = options?.encode || encodeURIComponent;\n\t    if (!cookieNameRegExp.test(name)) {\n\t        throw new TypeError(`argument name is invalid: ${name}`);\n\t    }\n\t    const value = enc(val);\n\t    if (!cookieValueRegExp.test(value)) {\n\t        throw new TypeError(`argument val is invalid: ${val}`);\n\t    }\n\t    let str = name + \"=\" + value;\n\t    if (!options)\n\t        return str;\n\t    if (options.maxAge !== undefined) {\n\t        if (!Number.isInteger(options.maxAge)) {\n\t            throw new TypeError(`option maxAge is invalid: ${options.maxAge}`);\n\t        }\n\t        str += \"; Max-Age=\" + options.maxAge;\n\t    }\n\t    if (options.domain) {\n\t        if (!domainValueRegExp.test(options.domain)) {\n\t            throw new TypeError(`option domain is invalid: ${options.domain}`);\n\t        }\n\t        str += \"; Domain=\" + options.domain;\n\t    }\n\t    if (options.path) {\n\t        if (!pathValueRegExp.test(options.path)) {\n\t            throw new TypeError(`option path is invalid: ${options.path}`);\n\t        }\n\t        str += \"; Path=\" + options.path;\n\t    }\n\t    if (options.expires) {\n\t        if (!isDate(options.expires) ||\n\t            !Number.isFinite(options.expires.valueOf())) {\n\t            throw new TypeError(`option expires is invalid: ${options.expires}`);\n\t        }\n\t        str += \"; Expires=\" + options.expires.toUTCString();\n\t    }\n\t    if (options.httpOnly) {\n\t        str += \"; HttpOnly\";\n\t    }\n\t    if (options.secure) {\n\t        str += \"; Secure\";\n\t    }\n\t    if (options.partitioned) {\n\t        str += \"; Partitioned\";\n\t    }\n\t    if (options.priority) {\n\t        const priority = typeof options.priority === \"string\"\n\t            ? options.priority.toLowerCase()\n\t            : undefined;\n\t        switch (priority) {\n\t            case \"low\":\n\t                str += \"; Priority=Low\";\n\t                break;\n\t            case \"medium\":\n\t                str += \"; Priority=Medium\";\n\t                break;\n\t            case \"high\":\n\t                str += \"; Priority=High\";\n\t                break;\n\t            default:\n\t                throw new TypeError(`option priority is invalid: ${options.priority}`);\n\t        }\n\t    }\n\t    if (options.sameSite) {\n\t        const sameSite = typeof options.sameSite === \"string\"\n\t            ? options.sameSite.toLowerCase()\n\t            : options.sameSite;\n\t        switch (sameSite) {\n\t            case true:\n\t            case \"strict\":\n\t                str += \"; SameSite=Strict\";\n\t                break;\n\t            case \"lax\":\n\t                str += \"; SameSite=Lax\";\n\t                break;\n\t            case \"none\":\n\t                str += \"; SameSite=None\";\n\t                break;\n\t            default:\n\t                throw new TypeError(`option sameSite is invalid: ${options.sameSite}`);\n\t        }\n\t    }\n\t    return str;\n\t}\n\t/**\n\t * URL-decode string value. Optimized to skip native call when no %.\n\t */\n\tfunction decode(str) {\n\t    if (str.indexOf(\"%\") === -1)\n\t        return str;\n\t    try {\n\t        return decodeURIComponent(str);\n\t    }\n\t    catch (e) {\n\t        return str;\n\t    }\n\t}\n\t/**\n\t * Determine if value is a Date.\n\t */\n\tfunction isDate(val) {\n\t    return __toString.call(val) === \"[object Date]\";\n\t}\n\t\n\treturn dist;\n}\n\nvar distExports = requireDist();\n\nfunction hasDocumentCookie() {\n    const testingValue = typeof global === 'undefined'\n        ? undefined\n        : global.TEST_HAS_DOCUMENT_COOKIE;\n    if (typeof testingValue === 'boolean') {\n        return testingValue;\n    }\n    // Can we get/set cookies on document.cookie?\n    return typeof document === 'object' && typeof document.cookie === 'string';\n}\nfunction parseCookies(cookies) {\n    if (typeof cookies === 'string') {\n        return distExports.parse(cookies);\n    }\n    else if (typeof cookies === 'object' && cookies !== null) {\n        return cookies;\n    }\n    else {\n        return {};\n    }\n}\nfunction readCookie(value, options = {}) {\n    const cleanValue = cleanupCookieValue(value);\n    if (!options.doNotParse) {\n        try {\n            return JSON.parse(cleanValue);\n        }\n        catch (e) {\n            // At least we tried\n        }\n    }\n    // Ignore clean value if we failed the deserialization\n    // It is not relevant anymore to trim those values\n    return value;\n}\nfunction cleanupCookieValue(value) {\n    // express prepend j: before serializing a cookie\n    if (value && value[0] === 'j' && value[1] === ':') {\n        return value.substr(2);\n    }\n    return value;\n}\n\nclass Cookies {\n    constructor(cookies, defaultSetOptions = {}) {\n        this.changeListeners = [];\n        this.HAS_DOCUMENT_COOKIE = false;\n        this.update = () => {\n            if (!this.HAS_DOCUMENT_COOKIE) {\n                return;\n            }\n            const previousCookies = this.cookies;\n            this.cookies = distExports.parse(document.cookie);\n            this._checkChanges(previousCookies);\n        };\n        const domCookies = typeof document === 'undefined' ? '' : document.cookie;\n        this.cookies = parseCookies(cookies || domCookies);\n        this.defaultSetOptions = defaultSetOptions;\n        this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();\n    }\n    _emitChange(params) {\n        for (let i = 0; i < this.changeListeners.length; ++i) {\n            this.changeListeners[i](params);\n        }\n    }\n    _checkChanges(previousCookies) {\n        const names = new Set(Object.keys(previousCookies).concat(Object.keys(this.cookies)));\n        names.forEach((name) => {\n            if (previousCookies[name] !== this.cookies[name]) {\n                this._emitChange({\n                    name,\n                    value: readCookie(this.cookies[name]),\n                });\n            }\n        });\n    }\n    _startPolling() {\n        this.pollingInterval = setInterval(this.update, 300);\n    }\n    _stopPolling() {\n        if (this.pollingInterval) {\n            clearInterval(this.pollingInterval);\n        }\n    }\n    get(name, options = {}) {\n        if (!options.doNotUpdate) {\n            this.update();\n        }\n        return readCookie(this.cookies[name], options);\n    }\n    getAll(options = {}) {\n        if (!options.doNotUpdate) {\n            this.update();\n        }\n        const result = {};\n        for (let name in this.cookies) {\n            result[name] = readCookie(this.cookies[name], options);\n        }\n        return result;\n    }\n    set(name, value, options) {\n        if (options) {\n            options = Object.assign(Object.assign({}, this.defaultSetOptions), options);\n        }\n        else {\n            options = this.defaultSetOptions;\n        }\n        const stringValue = typeof value === 'string' ? value : JSON.stringify(value);\n        this.cookies = Object.assign(Object.assign({}, this.cookies), { [name]: stringValue });\n        if (this.HAS_DOCUMENT_COOKIE) {\n            document.cookie = distExports.serialize(name, stringValue, options);\n        }\n        this._emitChange({ name, value, options });\n    }\n    remove(name, options) {\n        const finalOptions = (options = Object.assign(Object.assign(Object.assign({}, this.defaultSetOptions), options), { expires: new Date(1970, 1, 1, 0, 0, 1), maxAge: 0 }));\n        this.cookies = Object.assign({}, this.cookies);\n        delete this.cookies[name];\n        if (this.HAS_DOCUMENT_COOKIE) {\n            document.cookie = distExports.serialize(name, '', finalOptions);\n        }\n        this._emitChange({ name, value: undefined, options });\n    }\n    addChangeListener(callback) {\n        this.changeListeners.push(callback);\n        if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 1) {\n            if (typeof window === 'object' && 'cookieStore' in window) {\n                window.cookieStore.addEventListener('change', this.update);\n            }\n            else {\n                this._startPolling();\n            }\n        }\n    }\n    removeChangeListener(callback) {\n        const idx = this.changeListeners.indexOf(callback);\n        if (idx >= 0) {\n            this.changeListeners.splice(idx, 1);\n        }\n        if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 0) {\n            if (typeof window === 'object' && 'cookieStore' in window) {\n                window.cookieStore.removeEventListener('change', this.update);\n            }\n            else {\n                this._stopPolling();\n            }\n        }\n    }\n    removeAllChangeListeners() {\n        while (this.changeListeners.length > 0) {\n            this.removeChangeListener(this.changeListeners[0]);\n        }\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/universal-cookie/esm/index.mjs\n");

/***/ })

};
;