"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chat/layout",{

/***/ "(app-pages-browser)/./src/apis/axios.ts":
/*!***************************!*\
  !*** ./src/apis/axios.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   api: () => (/* binding */ api),\n/* harmony export */   chatApi: () => (/* binding */ chatApi)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _utils_cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cookie */ \"(app-pages-browser)/./src/utils/cookie.ts\");\n/* harmony import */ var _auth_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth.api */ \"(app-pages-browser)/./src/apis/auth.api.ts\");\n/* eslint-disable @typescript-eslint/no-explicit-any */ \n\n\nconst api = axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].create({\n    baseURL: \"https://api.flichat.co.kr\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\nconst chatApi = axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].create({\n    baseURL: \"https://chat.flichat.co.kr\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\nconst withAuthHeader = (config, token)=>{\n    var _config_headers;\n    config.headers = (_config_headers = config.headers) !== null && _config_headers !== void 0 ? _config_headers : {};\n    config.headers.Authorization = \"Bearer \".concat(token);\n    return config;\n};\n// ===== Request interceptors =====\nconst attachAccessToken = (config)=>{\n    // ✅ 클라이언트에서만 실행\n    if (true) {\n        const token = localStorage.getItem(\"accessToken\");\n        if (token) withAuthHeader(config, token);\n    }\n    return config;\n};\napi.interceptors.request.use(attachAccessToken, Promise.reject);\nchatApi.interceptors.request.use(attachAccessToken, Promise.reject);\n// ===== Refresh queue state =====\nlet isRefreshing = false;\nlet failedQueue = [];\nconst processQueue = function(error) {\n    let token = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n    failedQueue.forEach((param)=>{\n        let { resolve, reject } = param;\n        if (error || !token) reject(error || new Error(\"No refreshed token\"));\n        else resolve(token);\n    });\n    failedQueue = [];\n};\n// const redirectToLogin = async () => {\n//   if (window.location.pathname !== \"/\") {\n//     window.location.replace(\"/chat/login\");\n//   }\n//   await useAuth.getState().setAuthStatus(AuthStatus.unauthorized);\n// };\nconst makeResponseInterceptor = // eslint-disable-next-line @typescript-eslint/no-unused-vars\n(client)=>async (response)=>{\n        return response;\n    };\n/**\n * 공통 에러 처리(401 → refresh → 재시도)\n * - 현재 인스턴스(client)로 재시도\n */ const makeErrorInterceptor = (client)=>async (error)=>{\n        const originalConfig = error.config || {};\n        // 응답 자체가 없으면(네트워크 등) 그대로 던짐\n        if (!error.response) {\n            return Promise.reject(error);\n        }\n        const status = error.response.status;\n        // refresh 호출이 401이면 즉시 로그아웃/리다이렉트\n        // if (originalConfig.url?.includes(\"/refresh\") && status === 401) {\n        //   await redirectToLogin();\n        //   return Promise.reject(error);\n        // }\n        // 401 처리\n        if (status === 401 && !originalConfig._retry) {\n            // ✅ 클라이언트에서만 refresh 로직 실행\n            if (false) {}\n            if (isRefreshing) {\n                // 새 토큰이 나올 때까지 대기\n                return new Promise((resolve, reject)=>{\n                    failedQueue.push({\n                        resolve: (token)=>{\n                            try {\n                                originalConfig.headers = {\n                                    ...originalConfig.headers\n                                };\n                                withAuthHeader(originalConfig, token);\n                                resolve(client.request(originalConfig));\n                            } catch (e) {\n                                reject(e);\n                            }\n                        },\n                        reject\n                    });\n                });\n            }\n            originalConfig._retry = true;\n            isRefreshing = true;\n            try {\n                const storedAccessToken = localStorage.getItem(\"accessToken\");\n                const storedRefreshToken = (0,_utils_cookie__WEBPACK_IMPORTED_MODULE_0__.getCookie)(\"refreshToken\");\n                if (!storedAccessToken || !storedRefreshToken) {\n                    throw new Error(\"토큰이 없습니다.\");\n                }\n                const { accessToken, refreshToken } = await _auth_api__WEBPACK_IMPORTED_MODULE_1__.AuthApi.refreshToken(storedAccessToken, storedRefreshToken);\n                if (!accessToken || !refreshToken) {\n                    throw new Error(\"토큰 갱신 실패\");\n                }\n                // 새 토큰 저장\n                localStorage.setItem(\"accessToken\", accessToken);\n                (0,_utils_cookie__WEBPACK_IMPORTED_MODULE_0__.setCookie)(\"refreshToken\", refreshToken, {\n                    path: \"/\",\n                    // 운영 환경에서는 보안 옵션 권장\n                    secure: true,\n                    sameSite: \"Lax\"\n                });\n                // 대기 중이던 요청들 처리\n                processQueue(null, accessToken);\n                // 현재 실패했던 이 요청에도 새 토큰 주입해서 재시도\n                withAuthHeader(originalConfig, accessToken);\n                return client(originalConfig);\n            } catch (refreshErr) {\n                // 대기열 전부 실패 처리\n                processQueue(refreshErr, null);\n                // await redirectToLogin();\n                return Promise.reject(refreshErr);\n            } finally{\n                isRefreshing = false;\n            }\n        }\n        // 기타 에러는 그대로\n        return Promise.reject(error);\n    };\n// ===== Response interceptors 등록 =====\napi.interceptors.response.use(makeResponseInterceptor(api), makeErrorInterceptor(api));\nchatApi.interceptors.response.use(makeResponseInterceptor(chatApi), makeErrorInterceptor(chatApi));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/apis/axios.ts\n"));

/***/ })

});